{
  "Query": {
    "Kind": "OBJECT",
    "Description": "",
    "Name": "Query",
    "Directives": null,
    "Interfaces": null,
    "Fields": [
      {
        "Description": "",
        "Name": "getUsers",
        "Arguments": null,
        "DefaultValue": null,
        "Type": {
          "NamedType": "",
          "Elem": {
            "NamedType": "User",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 30,
              "End": 31,
              "Line": 2,
              "Column": 18,
              "Src": {
                "Name": "graphql/schema/query.graphqls",
                "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "NonNull": true,
          "Position": {
            "Start": 33,
            "End": 34,
            "Line": 2,
            "Column": 21,
            "Src": {
              "Name": "graphql/schema/query.graphqls",
              "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": [
          {
            "Name": "retrieve",
            "Arguments": [
              {
                "Name": "key",
                "Value": {
                  "Raw": "User/Top1000",
                  "Children": null,
                  "Kind": 3,
                  "Position": {
                    "Start": 48,
                    "End": 62,
                    "Line": 2,
                    "Column": 37,
                    "Src": {
                      "Name": "graphql/schema/query.graphqls",
                      "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                      "BuiltIn": false
                    }
                  },
                  "Definition": null,
                  "VariableDefinition": null,
                  "ExpectedType": null
                },
                "Position": {
                  "Start": 43,
                  "End": 46,
                  "Line": 2,
                  "Column": 31,
                  "Src": {
                    "Name": "graphql/schema/query.graphqls",
                    "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                    "BuiltIn": false
                  }
                }
              }
            ],
            "Position": {
              "Start": 34,
              "End": 42,
              "Line": 2,
              "Column": 22,
              "Src": {
                "Name": "graphql/schema/query.graphqls",
                "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                "BuiltIn": false
              }
            },
            "ParentDefinition": null,
            "Definition": {
              "Description": "",
              "Name": "retrieve",
              "Arguments": [
                {
                  "Description": "",
                  "Name": "key",
                  "DefaultValue": null,
                  "Type": {
                    "NamedType": "String",
                    "Elem": null,
                    "NonNull": true,
                    "Position": {
                      "Start": 285,
                      "End": 289,
                      "Line": 12,
                      "Column": 35,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  "Directives": null,
                  "Position": {
                    "Start": 271,
                    "End": 274,
                    "Line": 12,
                    "Column": 21,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                {
                  "Description": "",
                  "Name": "args",
                  "DefaultValue": null,
                  "Type": {
                    "NamedType": "",
                    "Elem": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 299,
                        "End": 300,
                        "Line": 12,
                        "Column": 49,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "NonNull": false,
                    "Position": {
                      "Start": 292,
                      "End": 298,
                      "Line": 12,
                      "Column": 42,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  "Directives": null,
                  "Position": {
                    "Start": 285,
                    "End": 289,
                    "Line": 12,
                    "Column": 35,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Locations": [
                "FIELD_DEFINITION"
              ],
              "Position": {
                "Start": 262,
                "End": 270,
                "Line": 12,
                "Column": 12,
                "Src": {
                  "Name": "graphql/schema/schema.graphqls",
                  "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                  "BuiltIn": false
                }
              }
            },
            "Location": ""
          }
        ],
        "Position": {
          "Start": 14,
          "End": 22,
          "Line": 2,
          "Column": 2,
          "Src": {
            "Name": "graphql/schema/query.graphqls",
            "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
            "BuiltIn": false
          }
        }
      },
      {
        "Description": "",
        "Name": "getProducts",
        "Arguments": null,
        "DefaultValue": null,
        "Type": {
          "NamedType": "",
          "Elem": {
            "NamedType": "Product",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 87,
              "End": 88,
              "Line": 3,
              "Column": 24,
              "Src": {
                "Name": "graphql/schema/query.graphqls",
                "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "NonNull": true,
          "Position": {
            "Start": 90,
            "End": 91,
            "Line": 3,
            "Column": 27,
            "Src": {
              "Name": "graphql/schema/query.graphqls",
              "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": [
          {
            "Name": "retrieve",
            "Arguments": [
              {
                "Name": "key",
                "Value": {
                  "Raw": "Product/Top1000",
                  "Children": null,
                  "Kind": 3,
                  "Position": {
                    "Start": 105,
                    "End": 122,
                    "Line": 3,
                    "Column": 43,
                    "Src": {
                      "Name": "graphql/schema/query.graphqls",
                      "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                      "BuiltIn": false
                    }
                  },
                  "Definition": null,
                  "VariableDefinition": null,
                  "ExpectedType": null
                },
                "Position": {
                  "Start": 100,
                  "End": 103,
                  "Line": 3,
                  "Column": 37,
                  "Src": {
                    "Name": "graphql/schema/query.graphqls",
                    "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                    "BuiltIn": false
                  }
                }
              }
            ],
            "Position": {
              "Start": 91,
              "End": 99,
              "Line": 3,
              "Column": 28,
              "Src": {
                "Name": "graphql/schema/query.graphqls",
                "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                "BuiltIn": false
              }
            },
            "ParentDefinition": null,
            "Definition": {
              "Description": "",
              "Name": "retrieve",
              "Arguments": [
                {
                  "Description": "",
                  "Name": "key",
                  "DefaultValue": null,
                  "Type": {
                    "NamedType": "String",
                    "Elem": null,
                    "NonNull": true,
                    "Position": {
                      "Start": 285,
                      "End": 289,
                      "Line": 12,
                      "Column": 35,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  "Directives": null,
                  "Position": {
                    "Start": 271,
                    "End": 274,
                    "Line": 12,
                    "Column": 21,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                {
                  "Description": "",
                  "Name": "args",
                  "DefaultValue": null,
                  "Type": {
                    "NamedType": "",
                    "Elem": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 299,
                        "End": 300,
                        "Line": 12,
                        "Column": 49,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "NonNull": false,
                    "Position": {
                      "Start": 292,
                      "End": 298,
                      "Line": 12,
                      "Column": 42,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  "Directives": null,
                  "Position": {
                    "Start": 285,
                    "End": 289,
                    "Line": 12,
                    "Column": 35,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Locations": [
                "FIELD_DEFINITION"
              ],
              "Position": {
                "Start": 262,
                "End": 270,
                "Line": 12,
                "Column": 12,
                "Src": {
                  "Name": "graphql/schema/schema.graphqls",
                  "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                  "BuiltIn": false
                }
              }
            },
            "Location": ""
          }
        ],
        "Position": {
          "Start": 65,
          "End": 76,
          "Line": 3,
          "Column": 2,
          "Src": {
            "Name": "graphql/schema/query.graphqls",
            "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
            "BuiltIn": false
          }
        }
      },
      {
        "Description": "",
        "Name": "getProductByID",
        "Arguments": [
          {
            "Description": "",
            "Name": "productID",
            "DefaultValue": null,
            "Type": {
              "NamedType": "UUID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 157,
                "End": 158,
                "Line": 5,
                "Column": 33,
                "Src": {
                  "Name": "graphql/schema/query.graphqls",
                  "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 141,
              "End": 150,
              "Line": 5,
              "Column": 17,
              "Src": {
                "Name": "graphql/schema/query.graphqls",
                "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                "BuiltIn": false
              }
            }
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Product",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 160,
            "End": 167,
            "Line": 5,
            "Column": 36,
            "Src": {
              "Name": "graphql/schema/query.graphqls",
              "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": [
          {
            "Name": "retrieve",
            "Arguments": [
              {
                "Name": "key",
                "Value": {
                  "Raw": "Product/ByID",
                  "Children": null,
                  "Kind": 3,
                  "Position": {
                    "Start": 183,
                    "End": 197,
                    "Line": 5,
                    "Column": 60,
                    "Src": {
                      "Name": "graphql/schema/query.graphqls",
                      "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                      "BuiltIn": false
                    }
                  },
                  "Definition": null,
                  "VariableDefinition": null,
                  "ExpectedType": null
                },
                "Position": {
                  "Start": 178,
                  "End": 181,
                  "Line": 5,
                  "Column": 54,
                  "Src": {
                    "Name": "graphql/schema/query.graphqls",
                    "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                    "BuiltIn": false
                  }
                }
              },
              {
                "Name": "args",
                "Value": {
                  "Raw": "",
                  "Children": [
                    {
                      "Name": "",
                      "Value": {
                        "Raw": "primaryID=$productID",
                        "Children": null,
                        "Kind": 3,
                        "Position": {
                          "Start": 206,
                          "End": 228,
                          "Line": 5,
                          "Column": 83,
                          "Src": {
                            "Name": "graphql/schema/query.graphqls",
                            "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                            "BuiltIn": false
                          }
                        },
                        "Definition": null,
                        "VariableDefinition": null,
                        "ExpectedType": null
                      },
                      "Position": null
                    }
                  ],
                  "Kind": 8,
                  "Position": {
                    "Start": 205,
                    "End": 206,
                    "Line": 5,
                    "Column": 81,
                    "Src": {
                      "Name": "graphql/schema/query.graphqls",
                      "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                      "BuiltIn": false
                    }
                  },
                  "Definition": null,
                  "VariableDefinition": null,
                  "ExpectedType": null
                },
                "Position": {
                  "Start": 199,
                  "End": 203,
                  "Line": 5,
                  "Column": 75,
                  "Src": {
                    "Name": "graphql/schema/query.graphqls",
                    "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                    "BuiltIn": false
                  }
                }
              }
            ],
            "Position": {
              "Start": 169,
              "End": 177,
              "Line": 5,
              "Column": 45,
              "Src": {
                "Name": "graphql/schema/query.graphqls",
                "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                "BuiltIn": false
              }
            },
            "ParentDefinition": null,
            "Definition": {
              "Description": "",
              "Name": "retrieve",
              "Arguments": [
                {
                  "Description": "",
                  "Name": "key",
                  "DefaultValue": null,
                  "Type": {
                    "NamedType": "String",
                    "Elem": null,
                    "NonNull": true,
                    "Position": {
                      "Start": 285,
                      "End": 289,
                      "Line": 12,
                      "Column": 35,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  "Directives": null,
                  "Position": {
                    "Start": 271,
                    "End": 274,
                    "Line": 12,
                    "Column": 21,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                {
                  "Description": "",
                  "Name": "args",
                  "DefaultValue": null,
                  "Type": {
                    "NamedType": "",
                    "Elem": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 299,
                        "End": 300,
                        "Line": 12,
                        "Column": 49,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "NonNull": false,
                    "Position": {
                      "Start": 292,
                      "End": 298,
                      "Line": 12,
                      "Column": 42,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  "Directives": null,
                  "Position": {
                    "Start": 285,
                    "End": 289,
                    "Line": 12,
                    "Column": 35,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Locations": [
                "FIELD_DEFINITION"
              ],
              "Position": {
                "Start": 262,
                "End": 270,
                "Line": 12,
                "Column": 12,
                "Src": {
                  "Name": "graphql/schema/schema.graphqls",
                  "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                  "BuiltIn": false
                }
              }
            },
            "Location": ""
          }
        ],
        "Position": {
          "Start": 126,
          "End": 140,
          "Line": 5,
          "Column": 2,
          "Src": {
            "Name": "graphql/schema/query.graphqls",
            "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
            "BuiltIn": false
          }
        }
      },
      {
        "Description": "",
        "Name": "__schema",
        "Arguments": null,
        "DefaultValue": null,
        "Type": {
          "NamedType": "__Schema",
          "Elem": null,
          "NonNull": true,
          "Position": null
        },
        "Directives": null,
        "Position": null
      },
      {
        "Description": "",
        "Name": "__type",
        "Arguments": [
          {
            "Description": "",
            "Name": "name",
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": null
            },
            "Directives": null,
            "Position": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "__Type",
          "Elem": null,
          "NonNull": true,
          "Position": null
        },
        "Directives": null,
        "Position": null
      }
    ],
    "Types": null,
    "EnumValues": null,
    "Position": {
      "Start": 5,
      "End": 10,
      "Line": 1,
      "Column": 6,
      "Src": {
        "Name": "graphql/schema/query.graphqls",
        "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
        "BuiltIn": false
      }
    },
    "BuiltIn": false
  },
  "Mutation": {
    "Kind": "OBJECT",
    "Description": "",
    "Name": "Mutation",
    "Directives": null,
    "Interfaces": null,
    "Fields": [
      {
        "Description": "",
        "Name": "clearCache",
        "Arguments": null,
        "DefaultValue": null,
        "Type": {
          "NamedType": "Boolean",
          "Elem": null,
          "NonNull": true,
          "Position": {
            "Start": 40,
            "End": 57,
            "Line": 4,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/mutation.graphqls",
              "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 17,
          "End": 27,
          "Line": 2,
          "Column": 2,
          "Src": {
            "Name": "graphql/schema/mutation.graphqls",
            "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
            "BuiltIn": false
          }
        }
      },
      {
        "Description": "",
        "Name": "updateProductByID",
        "Arguments": [
          {
            "Description": "",
            "Name": "input",
            "DefaultValue": null,
            "Type": {
              "NamedType": "UpdateProductInput",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 84,
                "End": 85,
                "Line": 4,
                "Column": 46,
                "Src": {
                  "Name": "graphql/schema/mutation.graphqls",
                  "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 58,
              "End": 63,
              "Line": 4,
              "Column": 20,
              "Src": {
                "Name": "graphql/schema/mutation.graphqls",
                "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                "BuiltIn": false
              }
            }
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Product",
          "Elem": null,
          "NonNull": true,
          "Position": {
            "Start": 96,
            "End": 97,
            "Line": 4,
            "Column": 58,
            "Src": {
              "Name": "graphql/schema/mutation.graphqls",
              "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": [
          {
            "Name": "retrieve",
            "Arguments": [
              {
                "Name": "key",
                "Value": {
                  "Raw": "Product/ByID",
                  "Children": null,
                  "Kind": 3,
                  "Position": {
                    "Start": 111,
                    "End": 125,
                    "Line": 4,
                    "Column": 74,
                    "Src": {
                      "Name": "graphql/schema/mutation.graphqls",
                      "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                      "BuiltIn": false
                    }
                  },
                  "Definition": null,
                  "VariableDefinition": null,
                  "ExpectedType": null
                },
                "Position": {
                  "Start": 106,
                  "End": 109,
                  "Line": 4,
                  "Column": 68,
                  "Src": {
                    "Name": "graphql/schema/mutation.graphqls",
                    "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                    "BuiltIn": false
                  }
                }
              }
            ],
            "Position": {
              "Start": 97,
              "End": 105,
              "Line": 4,
              "Column": 59,
              "Src": {
                "Name": "graphql/schema/mutation.graphqls",
                "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                "BuiltIn": false
              }
            },
            "ParentDefinition": null,
            "Definition": {
              "Description": "",
              "Name": "retrieve",
              "Arguments": [
                {
                  "Description": "",
                  "Name": "key",
                  "DefaultValue": null,
                  "Type": {
                    "NamedType": "String",
                    "Elem": null,
                    "NonNull": true,
                    "Position": {
                      "Start": 285,
                      "End": 289,
                      "Line": 12,
                      "Column": 35,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  "Directives": null,
                  "Position": {
                    "Start": 271,
                    "End": 274,
                    "Line": 12,
                    "Column": 21,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                {
                  "Description": "",
                  "Name": "args",
                  "DefaultValue": null,
                  "Type": {
                    "NamedType": "",
                    "Elem": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 299,
                        "End": 300,
                        "Line": 12,
                        "Column": 49,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "NonNull": false,
                    "Position": {
                      "Start": 292,
                      "End": 298,
                      "Line": 12,
                      "Column": 42,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  "Directives": null,
                  "Position": {
                    "Start": 285,
                    "End": 289,
                    "Line": 12,
                    "Column": 35,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Locations": [
                "FIELD_DEFINITION"
              ],
              "Position": {
                "Start": 262,
                "End": 270,
                "Line": 12,
                "Column": 12,
                "Src": {
                  "Name": "graphql/schema/schema.graphqls",
                  "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                  "BuiltIn": false
                }
              }
            },
            "Location": ""
          }
        ],
        "Position": {
          "Start": 40,
          "End": 57,
          "Line": 4,
          "Column": 2,
          "Src": {
            "Name": "graphql/schema/mutation.graphqls",
            "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
            "BuiltIn": false
          }
        }
      }
    ],
    "Types": null,
    "EnumValues": null,
    "Position": {
      "Start": 5,
      "End": 13,
      "Line": 1,
      "Column": 6,
      "Src": {
        "Name": "graphql/schema/mutation.graphqls",
        "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
        "BuiltIn": false
      }
    },
    "BuiltIn": false
  },
  "Subscription": null,
  "Types": {
    "Boolean": {
      "Kind": "SCALAR",
      "Description": "The `Boolean` scalar type represents `true` or `false`.",
      "Name": "Boolean",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 723,
        "End": 730,
        "Line": 13,
        "Column": 8,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true
    },
    "Brand": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "Brand",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "brandID",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "UUID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 29,
              "End": 30,
              "Line": 2,
              "Column": 17,
              "Src": {
                "Name": "graphql/schema/brand.graphqls",
                "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Brand/BrandID",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 44,
                      "End": 59,
                      "Line": 2,
                      "Column": 33,
                      "Src": {
                        "Name": "graphql/schema/brand.graphqls",
                        "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 37,
                    "End": 42,
                    "Line": 2,
                    "Column": 25,
                    "Src": {
                      "Name": "graphql/schema/brand.graphqls",
                      "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 30,
                "End": 36,
                "Line": 2,
                "Column": 18,
                "Src": {
                  "Name": "graphql/schema/brand.graphqls",
                  "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 14,
            "End": 21,
            "Line": 2,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/brand.graphqls",
              "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 76,
              "End": 77,
              "Line": 3,
              "Column": 16,
              "Src": {
                "Name": "graphql/schema/brand.graphqls",
                "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Brand/Name",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 91,
                      "End": 103,
                      "Line": 3,
                      "Column": 32,
                      "Src": {
                        "Name": "graphql/schema/brand.graphqls",
                        "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 84,
                    "End": 89,
                    "Line": 3,
                    "Column": 24,
                    "Src": {
                      "Name": "graphql/schema/brand.graphqls",
                      "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 77,
                "End": 83,
                "Line": 3,
                "Column": 17,
                "Src": {
                  "Name": "graphql/schema/brand.graphqls",
                  "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 62,
            "End": 66,
            "Line": 3,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/brand.graphqls",
              "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "updatedAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Timestamp",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 117,
              "End": 126,
              "Line": 4,
              "Column": 13,
              "Src": {
                "Name": "graphql/schema/brand.graphqls",
                "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Brand/UpdatedAt",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 142,
                      "End": 159,
                      "Line": 4,
                      "Column": 39,
                      "Src": {
                        "Name": "graphql/schema/brand.graphqls",
                        "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 135,
                    "End": 140,
                    "Line": 4,
                    "Column": 31,
                    "Src": {
                      "Name": "graphql/schema/brand.graphqls",
                      "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 128,
                "End": 134,
                "Line": 4,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/brand.graphqls",
                  "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 106,
            "End": 115,
            "Line": 4,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/brand.graphqls",
              "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "createdAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Timestamp",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 184,
              "End": 185,
              "Line": 5,
              "Column": 24,
              "Src": {
                "Name": "graphql/schema/brand.graphqls",
                "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Brand/CreatedAt",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 199,
                      "End": 216,
                      "Line": 5,
                      "Column": 40,
                      "Src": {
                        "Name": "graphql/schema/brand.graphqls",
                        "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 192,
                    "End": 197,
                    "Line": 5,
                    "Column": 32,
                    "Src": {
                      "Name": "graphql/schema/brand.graphqls",
                      "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 185,
                "End": 191,
                "Line": 5,
                "Column": 25,
                "Src": {
                  "Name": "graphql/schema/brand.graphqls",
                  "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 162,
            "End": 171,
            "Line": 5,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/brand.graphqls",
              "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
              "BuiltIn": false
            }
          }
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 5,
        "End": 10,
        "Line": 1,
        "Column": 6,
        "Src": {
          "Name": "graphql/schema/brand.graphqls",
          "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false
    },
    "Category": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "Category",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "categoryID",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "UUID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 35,
              "End": 36,
              "Line": 2,
              "Column": 20,
              "Src": {
                "Name": "graphql/schema/category.graphqls",
                "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Category/CategoryID",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 50,
                      "End": 71,
                      "Line": 2,
                      "Column": 36,
                      "Src": {
                        "Name": "graphql/schema/category.graphqls",
                        "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 43,
                    "End": 48,
                    "Line": 2,
                    "Column": 28,
                    "Src": {
                      "Name": "graphql/schema/category.graphqls",
                      "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 36,
                "End": 42,
                "Line": 2,
                "Column": 21,
                "Src": {
                  "Name": "graphql/schema/category.graphqls",
                  "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 17,
            "End": 27,
            "Line": 2,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/category.graphqls",
              "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 88,
              "End": 89,
              "Line": 3,
              "Column": 16,
              "Src": {
                "Name": "graphql/schema/category.graphqls",
                "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Category/Name",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 103,
                      "End": 118,
                      "Line": 3,
                      "Column": 32,
                      "Src": {
                        "Name": "graphql/schema/category.graphqls",
                        "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 96,
                    "End": 101,
                    "Line": 3,
                    "Column": 24,
                    "Src": {
                      "Name": "graphql/schema/category.graphqls",
                      "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 89,
                "End": 95,
                "Line": 3,
                "Column": 17,
                "Src": {
                  "Name": "graphql/schema/category.graphqls",
                  "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 74,
            "End": 78,
            "Line": 3,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/category.graphqls",
              "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "updatedAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Timestamp",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 132,
              "End": 141,
              "Line": 4,
              "Column": 13,
              "Src": {
                "Name": "graphql/schema/category.graphqls",
                "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Category/UpdatedAt",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 157,
                      "End": 177,
                      "Line": 4,
                      "Column": 39,
                      "Src": {
                        "Name": "graphql/schema/category.graphqls",
                        "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 150,
                    "End": 155,
                    "Line": 4,
                    "Column": 31,
                    "Src": {
                      "Name": "graphql/schema/category.graphqls",
                      "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 143,
                "End": 149,
                "Line": 4,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/category.graphqls",
                  "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 121,
            "End": 130,
            "Line": 4,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/category.graphqls",
              "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "createdAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Timestamp",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 202,
              "End": 203,
              "Line": 5,
              "Column": 24,
              "Src": {
                "Name": "graphql/schema/category.graphqls",
                "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Category/CreatedAt",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 217,
                      "End": 237,
                      "Line": 5,
                      "Column": 40,
                      "Src": {
                        "Name": "graphql/schema/category.graphqls",
                        "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 210,
                    "End": 215,
                    "Line": 5,
                    "Column": 32,
                    "Src": {
                      "Name": "graphql/schema/category.graphqls",
                      "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 203,
                "End": 209,
                "Line": 5,
                "Column": 25,
                "Src": {
                  "Name": "graphql/schema/category.graphqls",
                  "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 180,
            "End": 189,
            "Line": 5,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/category.graphqls",
              "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "classification",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Classification",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 273,
              "End": 274,
              "Line": 7,
              "Column": 34,
              "Src": {
                "Name": "graphql/schema/category.graphqls",
                "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "retrieve",
              "Arguments": [
                {
                  "Name": "key",
                  "Value": {
                    "Raw": "Classification/ByID",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 288,
                      "End": 309,
                      "Line": 7,
                      "Column": 50,
                      "Src": {
                        "Name": "graphql/schema/category.graphqls",
                        "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 283,
                    "End": 286,
                    "Line": 7,
                    "Column": 44,
                    "Src": {
                      "Name": "graphql/schema/category.graphqls",
                      "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                },
                {
                  "Name": "args",
                  "Value": {
                    "Raw": "",
                    "Children": [
                      {
                        "Name": "",
                        "Value": {
                          "Raw": "primary=Category/ClassificationID",
                          "Children": null,
                          "Kind": 3,
                          "Position": {
                            "Start": 318,
                            "End": 353,
                            "Line": 7,
                            "Column": 80,
                            "Src": {
                              "Name": "graphql/schema/category.graphqls",
                              "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                              "BuiltIn": false
                            }
                          },
                          "Definition": null,
                          "VariableDefinition": null,
                          "ExpectedType": null
                        },
                        "Position": null
                      }
                    ],
                    "Kind": 8,
                    "Position": {
                      "Start": 317,
                      "End": 318,
                      "Line": 7,
                      "Column": 78,
                      "Src": {
                        "Name": "graphql/schema/category.graphqls",
                        "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 311,
                    "End": 315,
                    "Line": 7,
                    "Column": 72,
                    "Src": {
                      "Name": "graphql/schema/category.graphqls",
                      "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 274,
                "End": 282,
                "Line": 7,
                "Column": 35,
                "Src": {
                  "Name": "graphql/schema/category.graphqls",
                  "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "key",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 271,
                      "End": 274,
                      "Line": 12,
                      "Column": 21,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  {
                    "Description": "",
                    "Name": "args",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "",
                      "Elem": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 299,
                          "End": 300,
                          "Line": 12,
                          "Column": 49,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "NonNull": false,
                      "Position": {
                        "Start": 292,
                        "End": 298,
                        "Line": 12,
                        "Column": 42,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 285,
                      "End": 289,
                      "Line": 12,
                      "Column": 35,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 262,
                  "End": 270,
                  "Line": 12,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 241,
            "End": 255,
            "Line": 7,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/category.graphqls",
              "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
              "BuiltIn": false
            }
          }
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 5,
        "End": 13,
        "Line": 1,
        "Column": 6,
        "Src": {
          "Name": "graphql/schema/category.graphqls",
          "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false
    },
    "Classification": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "Classification",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "classificationID",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "UUID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 47,
              "End": 48,
              "Line": 2,
              "Column": 26,
              "Src": {
                "Name": "graphql/schema/classification.graphqls",
                "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Classification/ClassificationID",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 62,
                      "End": 95,
                      "Line": 2,
                      "Column": 42,
                      "Src": {
                        "Name": "graphql/schema/classification.graphqls",
                        "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 55,
                    "End": 60,
                    "Line": 2,
                    "Column": 34,
                    "Src": {
                      "Name": "graphql/schema/classification.graphqls",
                      "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 48,
                "End": 54,
                "Line": 2,
                "Column": 27,
                "Src": {
                  "Name": "graphql/schema/classification.graphqls",
                  "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 23,
            "End": 39,
            "Line": 2,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/classification.graphqls",
              "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 112,
              "End": 113,
              "Line": 3,
              "Column": 16,
              "Src": {
                "Name": "graphql/schema/classification.graphqls",
                "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Classification/Name",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 127,
                      "End": 148,
                      "Line": 3,
                      "Column": 32,
                      "Src": {
                        "Name": "graphql/schema/classification.graphqls",
                        "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 120,
                    "End": 125,
                    "Line": 3,
                    "Column": 24,
                    "Src": {
                      "Name": "graphql/schema/classification.graphqls",
                      "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 113,
                "End": 119,
                "Line": 3,
                "Column": 17,
                "Src": {
                  "Name": "graphql/schema/classification.graphqls",
                  "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 98,
            "End": 102,
            "Line": 3,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/classification.graphqls",
              "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "updatedAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Timestamp",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 162,
              "End": 171,
              "Line": 4,
              "Column": 13,
              "Src": {
                "Name": "graphql/schema/classification.graphqls",
                "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Classification/UpdatedAt",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 187,
                      "End": 213,
                      "Line": 4,
                      "Column": 39,
                      "Src": {
                        "Name": "graphql/schema/classification.graphqls",
                        "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 180,
                    "End": 185,
                    "Line": 4,
                    "Column": 31,
                    "Src": {
                      "Name": "graphql/schema/classification.graphqls",
                      "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 173,
                "End": 179,
                "Line": 4,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/classification.graphqls",
                  "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 151,
            "End": 160,
            "Line": 4,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/classification.graphqls",
              "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "createdAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Timestamp",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 238,
              "End": 239,
              "Line": 5,
              "Column": 24,
              "Src": {
                "Name": "graphql/schema/classification.graphqls",
                "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Classification/CreatedAt",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 253,
                      "End": 279,
                      "Line": 5,
                      "Column": 40,
                      "Src": {
                        "Name": "graphql/schema/classification.graphqls",
                        "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 246,
                    "End": 251,
                    "Line": 5,
                    "Column": 32,
                    "Src": {
                      "Name": "graphql/schema/classification.graphqls",
                      "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 239,
                "End": 245,
                "Line": 5,
                "Column": 25,
                "Src": {
                  "Name": "graphql/schema/classification.graphqls",
                  "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 216,
            "End": 225,
            "Line": 5,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/classification.graphqls",
              "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
              "BuiltIn": false
            }
          }
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 5,
        "End": 19,
        "Line": 1,
        "Column": 6,
        "Src": {
          "Name": "graphql/schema/classification.graphqls",
          "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false
    },
    "Contact": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "Contact",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "contactID",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "UUID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 33,
              "End": 34,
              "Line": 2,
              "Column": 19,
              "Src": {
                "Name": "graphql/schema/contact.graphqls",
                "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Contact/ContactID",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 48,
                      "End": 67,
                      "Line": 2,
                      "Column": 35,
                      "Src": {
                        "Name": "graphql/schema/contact.graphqls",
                        "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 41,
                    "End": 46,
                    "Line": 2,
                    "Column": 27,
                    "Src": {
                      "Name": "graphql/schema/contact.graphqls",
                      "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 34,
                "End": 40,
                "Line": 2,
                "Column": 20,
                "Src": {
                  "Name": "graphql/schema/contact.graphqls",
                  "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 16,
            "End": 25,
            "Line": 2,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/contact.graphqls",
              "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "contactValue",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 92,
              "End": 93,
              "Line": 3,
              "Column": 24,
              "Src": {
                "Name": "graphql/schema/contact.graphqls",
                "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Contact/ContactValue",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 107,
                      "End": 129,
                      "Line": 3,
                      "Column": 40,
                      "Src": {
                        "Name": "graphql/schema/contact.graphqls",
                        "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 100,
                    "End": 105,
                    "Line": 3,
                    "Column": 32,
                    "Src": {
                      "Name": "graphql/schema/contact.graphqls",
                      "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 93,
                "End": 99,
                "Line": 3,
                "Column": 25,
                "Src": {
                  "Name": "graphql/schema/contact.graphqls",
                  "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 70,
            "End": 82,
            "Line": 3,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/contact.graphqls",
              "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "contactType",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ContactType",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 158,
              "End": 159,
              "Line": 4,
              "Column": 28,
              "Src": {
                "Name": "graphql/schema/contact.graphqls",
                "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Contact/ContactType",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 173,
                      "End": 194,
                      "Line": 4,
                      "Column": 44,
                      "Src": {
                        "Name": "graphql/schema/contact.graphqls",
                        "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 166,
                    "End": 171,
                    "Line": 4,
                    "Column": 36,
                    "Src": {
                      "Name": "graphql/schema/contact.graphqls",
                      "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 159,
                "End": 165,
                "Line": 4,
                "Column": 29,
                "Src": {
                  "Name": "graphql/schema/contact.graphqls",
                  "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 132,
            "End": 143,
            "Line": 4,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/contact.graphqls",
              "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "updatedAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Timestamp",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 208,
              "End": 217,
              "Line": 5,
              "Column": 13,
              "Src": {
                "Name": "graphql/schema/contact.graphqls",
                "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Contact/UpdatedAt",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 233,
                      "End": 252,
                      "Line": 5,
                      "Column": 39,
                      "Src": {
                        "Name": "graphql/schema/contact.graphqls",
                        "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 226,
                    "End": 231,
                    "Line": 5,
                    "Column": 31,
                    "Src": {
                      "Name": "graphql/schema/contact.graphqls",
                      "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 219,
                "End": 225,
                "Line": 5,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/contact.graphqls",
                  "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 197,
            "End": 206,
            "Line": 5,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/contact.graphqls",
              "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "createdAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Timestamp",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 277,
              "End": 278,
              "Line": 6,
              "Column": 24,
              "Src": {
                "Name": "graphql/schema/contact.graphqls",
                "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Contact/CreatedAt",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 292,
                      "End": 311,
                      "Line": 6,
                      "Column": 40,
                      "Src": {
                        "Name": "graphql/schema/contact.graphqls",
                        "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 285,
                    "End": 290,
                    "Line": 6,
                    "Column": 32,
                    "Src": {
                      "Name": "graphql/schema/contact.graphqls",
                      "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 278,
                "End": 284,
                "Line": 6,
                "Column": 25,
                "Src": {
                  "Name": "graphql/schema/contact.graphqls",
                  "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 255,
            "End": 264,
            "Line": 6,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/contact.graphqls",
              "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
              "BuiltIn": false
            }
          }
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 5,
        "End": 12,
        "Line": 1,
        "Column": 6,
        "Src": {
          "Name": "graphql/schema/contact.graphqls",
          "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false
    },
    "ContactType": {
      "Kind": "ENUM",
      "Description": "",
      "Name": "ContactType",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": [
        {
          "Description": "",
          "Name": "EmailAddress",
          "Directives": null,
          "Position": {
            "Start": 20,
            "End": 32,
            "Line": 2,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/enums.graphqls",
              "Input": "enum ContactType {\n\tEmailAddress\n\tMobileNumber\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "MobileNumber",
          "Directives": null,
          "Position": {
            "Start": 34,
            "End": 46,
            "Line": 3,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/enums.graphqls",
              "Input": "enum ContactType {\n\tEmailAddress\n\tMobileNumber\n}\n",
              "BuiltIn": false
            }
          }
        }
      ],
      "Position": {
        "Start": 5,
        "End": 16,
        "Line": 1,
        "Column": 6,
        "Src": {
          "Name": "graphql/schema/enums.graphqls",
          "Input": "enum ContactType {\n\tEmailAddress\n\tMobileNumber\n}\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false
    },
    "Float": {
      "Kind": "SCALAR",
      "Description": "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).",
      "Name": "Float",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 453,
        "End": 458,
        "Line": 7,
        "Column": 8,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true
    },
    "ID": {
      "Kind": "SCALAR",
      "Description": "The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.",
      "Name": "ID",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 1074,
        "End": 1076,
        "Line": 16,
        "Column": 8,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true
    },
    "Int": {
      "Kind": "SCALAR",
      "Description": "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
      "Name": "Int",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 284,
        "End": 287,
        "Line": 4,
        "Column": 8,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true
    },
    "Mutation": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "Mutation",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "clearCache",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 40,
              "End": 57,
              "Line": 4,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/mutation.graphqls",
                "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 17,
            "End": 27,
            "Line": 2,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/mutation.graphqls",
              "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "updateProductByID",
          "Arguments": [
            {
              "Description": "",
              "Name": "input",
              "DefaultValue": null,
              "Type": {
                "NamedType": "UpdateProductInput",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 84,
                  "End": 85,
                  "Line": 4,
                  "Column": 46,
                  "Src": {
                    "Name": "graphql/schema/mutation.graphqls",
                    "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 58,
                "End": 63,
                "Line": 4,
                "Column": 20,
                "Src": {
                  "Name": "graphql/schema/mutation.graphqls",
                  "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                  "BuiltIn": false
                }
              }
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Product",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 96,
              "End": 97,
              "Line": 4,
              "Column": 58,
              "Src": {
                "Name": "graphql/schema/mutation.graphqls",
                "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "retrieve",
              "Arguments": [
                {
                  "Name": "key",
                  "Value": {
                    "Raw": "Product/ByID",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 111,
                      "End": 125,
                      "Line": 4,
                      "Column": 74,
                      "Src": {
                        "Name": "graphql/schema/mutation.graphqls",
                        "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 106,
                    "End": 109,
                    "Line": 4,
                    "Column": 68,
                    "Src": {
                      "Name": "graphql/schema/mutation.graphqls",
                      "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 97,
                "End": 105,
                "Line": 4,
                "Column": 59,
                "Src": {
                  "Name": "graphql/schema/mutation.graphqls",
                  "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "key",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 271,
                      "End": 274,
                      "Line": 12,
                      "Column": 21,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  {
                    "Description": "",
                    "Name": "args",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "",
                      "Elem": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 299,
                          "End": 300,
                          "Line": 12,
                          "Column": 49,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "NonNull": false,
                      "Position": {
                        "Start": 292,
                        "End": 298,
                        "Line": 12,
                        "Column": 42,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 285,
                      "End": 289,
                      "Line": 12,
                      "Column": 35,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 262,
                  "End": 270,
                  "Line": 12,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 40,
            "End": 57,
            "Line": 4,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/mutation.graphqls",
              "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
              "BuiltIn": false
            }
          }
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 5,
        "End": 13,
        "Line": 1,
        "Column": 6,
        "Src": {
          "Name": "graphql/schema/mutation.graphqls",
          "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false
    },
    "Product": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "Product",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "productID",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "UUID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 33,
              "End": 34,
              "Line": 2,
              "Column": 19,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Product/ProductID",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 48,
                      "End": 67,
                      "Line": 2,
                      "Column": 35,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 41,
                    "End": 46,
                    "Line": 2,
                    "Column": 27,
                    "Src": {
                      "Name": "graphql/schema/product.graphqls",
                      "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 34,
                "End": 40,
                "Line": 2,
                "Column": 20,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 16,
            "End": 25,
            "Line": 2,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/product.graphqls",
              "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 84,
              "End": 85,
              "Line": 3,
              "Column": 16,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Product/Name",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 99,
                      "End": 113,
                      "Line": 3,
                      "Column": 32,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 92,
                    "End": 97,
                    "Line": 3,
                    "Column": 24,
                    "Src": {
                      "Name": "graphql/schema/product.graphqls",
                      "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 85,
                "End": 91,
                "Line": 3,
                "Column": 17,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 70,
            "End": 74,
            "Line": 3,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/product.graphqls",
              "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "price",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Int",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 128,
              "End": 129,
              "Line": 4,
              "Column": 14,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Product/Price",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 143,
                      "End": 158,
                      "Line": 4,
                      "Column": 30,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 136,
                    "End": 141,
                    "Line": 4,
                    "Column": 22,
                    "Src": {
                      "Name": "graphql/schema/product.graphqls",
                      "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 129,
                "End": 135,
                "Line": 4,
                "Column": 15,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 116,
            "End": 121,
            "Line": 4,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/product.graphqls",
              "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "promotionDiscount",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Int",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 180,
              "End": 183,
              "Line": 5,
              "Column": 21,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Product/PromotionDiscount",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 199,
                      "End": 226,
                      "Line": 5,
                      "Column": 41,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 192,
                    "End": 197,
                    "Line": 5,
                    "Column": 33,
                    "Src": {
                      "Name": "graphql/schema/product.graphqls",
                      "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 185,
                "End": 191,
                "Line": 5,
                "Column": 26,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 161,
            "End": 178,
            "Line": 5,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/product.graphqls",
              "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "promotionDiscountMultiple",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Int",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 256,
              "End": 259,
              "Line": 6,
              "Column": 29,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Product/PromotionDiscountMultiple",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 275,
                      "End": 310,
                      "Line": 6,
                      "Column": 49,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 268,
                    "End": 273,
                    "Line": 6,
                    "Column": 41,
                    "Src": {
                      "Name": "graphql/schema/product.graphqls",
                      "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 261,
                "End": 267,
                "Line": 6,
                "Column": 34,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 229,
            "End": 254,
            "Line": 6,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/product.graphqls",
              "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "volume",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Int",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 321,
              "End": 324,
              "Line": 7,
              "Column": 10,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Product/Volume",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 340,
                      "End": 356,
                      "Line": 7,
                      "Column": 30,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 333,
                    "End": 338,
                    "Line": 7,
                    "Column": 22,
                    "Src": {
                      "Name": "graphql/schema/product.graphqls",
                      "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 326,
                "End": 332,
                "Line": 7,
                "Column": 15,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 313,
            "End": 319,
            "Line": 7,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/product.graphqls",
              "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "abv",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Int",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 364,
              "End": 367,
              "Line": 8,
              "Column": 7,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Product/ABV",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 383,
                      "End": 396,
                      "Line": 8,
                      "Column": 27,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 376,
                    "End": 381,
                    "Line": 8,
                    "Column": 19,
                    "Src": {
                      "Name": "graphql/schema/product.graphqls",
                      "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 369,
                "End": 375,
                "Line": 8,
                "Column": 12,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 359,
            "End": 362,
            "Line": 8,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/product.graphqls",
              "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "updatedAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Timestamp",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 410,
              "End": 419,
              "Line": 9,
              "Column": 13,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Product/UpdatedAt",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 435,
                      "End": 454,
                      "Line": 9,
                      "Column": 39,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 428,
                    "End": 433,
                    "Line": 9,
                    "Column": 31,
                    "Src": {
                      "Name": "graphql/schema/product.graphqls",
                      "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 421,
                "End": 427,
                "Line": 9,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 399,
            "End": 408,
            "Line": 9,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/product.graphqls",
              "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "createdAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Timestamp",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 479,
              "End": 480,
              "Line": 10,
              "Column": 24,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "Product/CreatedAt",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 494,
                      "End": 513,
                      "Line": 10,
                      "Column": 40,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 487,
                    "End": 492,
                    "Line": 10,
                    "Column": 32,
                    "Src": {
                      "Name": "graphql/schema/product.graphqls",
                      "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 480,
                "End": 486,
                "Line": 10,
                "Column": 25,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 457,
            "End": 466,
            "Line": 10,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/product.graphqls",
              "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "brand",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Brand",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 531,
              "End": 532,
              "Line": 12,
              "Column": 16,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "retrieve",
              "Arguments": [
                {
                  "Name": "key",
                  "Value": {
                    "Raw": "Brand/ByID",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 546,
                      "End": 558,
                      "Line": 12,
                      "Column": 32,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 541,
                    "End": 544,
                    "Line": 12,
                    "Column": 26,
                    "Src": {
                      "Name": "graphql/schema/product.graphqls",
                      "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                },
                {
                  "Name": "args",
                  "Value": {
                    "Raw": "",
                    "Children": [
                      {
                        "Name": "",
                        "Value": {
                          "Raw": "primaryID=Product/BrandID",
                          "Children": null,
                          "Kind": 3,
                          "Position": {
                            "Start": 567,
                            "End": 594,
                            "Line": 12,
                            "Column": 53,
                            "Src": {
                              "Name": "graphql/schema/product.graphqls",
                              "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                              "BuiltIn": false
                            }
                          },
                          "Definition": null,
                          "VariableDefinition": null,
                          "ExpectedType": null
                        },
                        "Position": null
                      }
                    ],
                    "Kind": 8,
                    "Position": {
                      "Start": 566,
                      "End": 567,
                      "Line": 12,
                      "Column": 51,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 560,
                    "End": 564,
                    "Line": 12,
                    "Column": 45,
                    "Src": {
                      "Name": "graphql/schema/product.graphqls",
                      "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 532,
                "End": 540,
                "Line": 12,
                "Column": 17,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "key",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 271,
                      "End": 274,
                      "Line": 12,
                      "Column": 21,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  {
                    "Description": "",
                    "Name": "args",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "",
                      "Elem": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 299,
                          "End": 300,
                          "Line": 12,
                          "Column": 49,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "NonNull": false,
                      "Position": {
                        "Start": 292,
                        "End": 298,
                        "Line": 12,
                        "Column": 42,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 285,
                      "End": 289,
                      "Line": 12,
                      "Column": 35,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 262,
                  "End": 270,
                  "Line": 12,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 517,
            "End": 522,
            "Line": 12,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/product.graphqls",
              "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "categories",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "Category",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 620,
                "End": 621,
                "Line": 13,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "NonNull": true,
            "Position": {
              "Start": 623,
              "End": 624,
              "Line": 13,
              "Column": 27,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "retrieve",
              "Arguments": [
                {
                  "Name": "key",
                  "Value": {
                    "Raw": "Category/AllByProductID",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 638,
                      "End": 663,
                      "Line": 13,
                      "Column": 43,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 633,
                    "End": 636,
                    "Line": 13,
                    "Column": 37,
                    "Src": {
                      "Name": "graphql/schema/product.graphqls",
                      "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                },
                {
                  "Name": "args",
                  "Value": {
                    "Raw": "",
                    "Children": [
                      {
                        "Name": "",
                        "Value": {
                          "Raw": "productID=Product/ProductID",
                          "Children": null,
                          "Kind": 3,
                          "Position": {
                            "Start": 672,
                            "End": 701,
                            "Line": 13,
                            "Column": 77,
                            "Src": {
                              "Name": "graphql/schema/product.graphqls",
                              "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                              "BuiltIn": false
                            }
                          },
                          "Definition": null,
                          "VariableDefinition": null,
                          "ExpectedType": null
                        },
                        "Position": null
                      }
                    ],
                    "Kind": 8,
                    "Position": {
                      "Start": 671,
                      "End": 672,
                      "Line": 13,
                      "Column": 75,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 665,
                    "End": 669,
                    "Line": 13,
                    "Column": 69,
                    "Src": {
                      "Name": "graphql/schema/product.graphqls",
                      "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 624,
                "End": 632,
                "Line": 13,
                "Column": 28,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "key",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 271,
                      "End": 274,
                      "Line": 12,
                      "Column": 21,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  {
                    "Description": "",
                    "Name": "args",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "",
                      "Elem": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 299,
                          "End": 300,
                          "Line": 12,
                          "Column": 49,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "NonNull": false,
                      "Position": {
                        "Start": 292,
                        "End": 298,
                        "Line": 12,
                        "Column": 42,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 285,
                      "End": 289,
                      "Line": 12,
                      "Column": 35,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 262,
                  "End": 270,
                  "Line": 12,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 598,
            "End": 608,
            "Line": 13,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/product.graphqls",
              "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
              "BuiltIn": false
            }
          }
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 5,
        "End": 12,
        "Line": 1,
        "Column": 6,
        "Src": {
          "Name": "graphql/schema/product.graphqls",
          "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false
    },
    "Query": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "Query",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "getUsers",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "User",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 30,
                "End": 31,
                "Line": 2,
                "Column": 18,
                "Src": {
                  "Name": "graphql/schema/query.graphqls",
                  "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "NonNull": true,
            "Position": {
              "Start": 33,
              "End": 34,
              "Line": 2,
              "Column": 21,
              "Src": {
                "Name": "graphql/schema/query.graphqls",
                "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "retrieve",
              "Arguments": [
                {
                  "Name": "key",
                  "Value": {
                    "Raw": "User/Top1000",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 48,
                      "End": 62,
                      "Line": 2,
                      "Column": 37,
                      "Src": {
                        "Name": "graphql/schema/query.graphqls",
                        "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 43,
                    "End": 46,
                    "Line": 2,
                    "Column": 31,
                    "Src": {
                      "Name": "graphql/schema/query.graphqls",
                      "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 34,
                "End": 42,
                "Line": 2,
                "Column": 22,
                "Src": {
                  "Name": "graphql/schema/query.graphqls",
                  "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "key",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 271,
                      "End": 274,
                      "Line": 12,
                      "Column": 21,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  {
                    "Description": "",
                    "Name": "args",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "",
                      "Elem": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 299,
                          "End": 300,
                          "Line": 12,
                          "Column": 49,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "NonNull": false,
                      "Position": {
                        "Start": 292,
                        "End": 298,
                        "Line": 12,
                        "Column": 42,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 285,
                      "End": 289,
                      "Line": 12,
                      "Column": 35,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 262,
                  "End": 270,
                  "Line": 12,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 14,
            "End": 22,
            "Line": 2,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/query.graphqls",
              "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "getProducts",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "Product",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 87,
                "End": 88,
                "Line": 3,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/query.graphqls",
                  "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "NonNull": true,
            "Position": {
              "Start": 90,
              "End": 91,
              "Line": 3,
              "Column": 27,
              "Src": {
                "Name": "graphql/schema/query.graphqls",
                "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "retrieve",
              "Arguments": [
                {
                  "Name": "key",
                  "Value": {
                    "Raw": "Product/Top1000",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 105,
                      "End": 122,
                      "Line": 3,
                      "Column": 43,
                      "Src": {
                        "Name": "graphql/schema/query.graphqls",
                        "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 100,
                    "End": 103,
                    "Line": 3,
                    "Column": 37,
                    "Src": {
                      "Name": "graphql/schema/query.graphqls",
                      "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 91,
                "End": 99,
                "Line": 3,
                "Column": 28,
                "Src": {
                  "Name": "graphql/schema/query.graphqls",
                  "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "key",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 271,
                      "End": 274,
                      "Line": 12,
                      "Column": 21,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  {
                    "Description": "",
                    "Name": "args",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "",
                      "Elem": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 299,
                          "End": 300,
                          "Line": 12,
                          "Column": 49,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "NonNull": false,
                      "Position": {
                        "Start": 292,
                        "End": 298,
                        "Line": 12,
                        "Column": 42,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 285,
                      "End": 289,
                      "Line": 12,
                      "Column": 35,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 262,
                  "End": 270,
                  "Line": 12,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 65,
            "End": 76,
            "Line": 3,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/query.graphqls",
              "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "getProductByID",
          "Arguments": [
            {
              "Description": "",
              "Name": "productID",
              "DefaultValue": null,
              "Type": {
                "NamedType": "UUID",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 157,
                  "End": 158,
                  "Line": 5,
                  "Column": 33,
                  "Src": {
                    "Name": "graphql/schema/query.graphqls",
                    "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 141,
                "End": 150,
                "Line": 5,
                "Column": 17,
                "Src": {
                  "Name": "graphql/schema/query.graphqls",
                  "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Product",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 160,
              "End": 167,
              "Line": 5,
              "Column": 36,
              "Src": {
                "Name": "graphql/schema/query.graphqls",
                "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "retrieve",
              "Arguments": [
                {
                  "Name": "key",
                  "Value": {
                    "Raw": "Product/ByID",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 183,
                      "End": 197,
                      "Line": 5,
                      "Column": 60,
                      "Src": {
                        "Name": "graphql/schema/query.graphqls",
                        "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 178,
                    "End": 181,
                    "Line": 5,
                    "Column": 54,
                    "Src": {
                      "Name": "graphql/schema/query.graphqls",
                      "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                },
                {
                  "Name": "args",
                  "Value": {
                    "Raw": "",
                    "Children": [
                      {
                        "Name": "",
                        "Value": {
                          "Raw": "primaryID=$productID",
                          "Children": null,
                          "Kind": 3,
                          "Position": {
                            "Start": 206,
                            "End": 228,
                            "Line": 5,
                            "Column": 83,
                            "Src": {
                              "Name": "graphql/schema/query.graphqls",
                              "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                              "BuiltIn": false
                            }
                          },
                          "Definition": null,
                          "VariableDefinition": null,
                          "ExpectedType": null
                        },
                        "Position": null
                      }
                    ],
                    "Kind": 8,
                    "Position": {
                      "Start": 205,
                      "End": 206,
                      "Line": 5,
                      "Column": 81,
                      "Src": {
                        "Name": "graphql/schema/query.graphqls",
                        "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 199,
                    "End": 203,
                    "Line": 5,
                    "Column": 75,
                    "Src": {
                      "Name": "graphql/schema/query.graphqls",
                      "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 169,
                "End": 177,
                "Line": 5,
                "Column": 45,
                "Src": {
                  "Name": "graphql/schema/query.graphqls",
                  "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "key",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 271,
                      "End": 274,
                      "Line": 12,
                      "Column": 21,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  {
                    "Description": "",
                    "Name": "args",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "",
                      "Elem": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 299,
                          "End": 300,
                          "Line": 12,
                          "Column": 49,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "NonNull": false,
                      "Position": {
                        "Start": 292,
                        "End": 298,
                        "Line": 12,
                        "Column": 42,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 285,
                      "End": 289,
                      "Line": 12,
                      "Column": 35,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 262,
                  "End": 270,
                  "Line": 12,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 126,
            "End": 140,
            "Line": 5,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/query.graphqls",
              "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "__schema",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Schema",
            "Elem": null,
            "NonNull": true,
            "Position": null
          },
          "Directives": null,
          "Position": null
        },
        {
          "Description": "",
          "Name": "__type",
          "Arguments": [
            {
              "Description": "",
              "Name": "name",
              "DefaultValue": null,
              "Type": {
                "NamedType": "String",
                "Elem": null,
                "NonNull": false,
                "Position": null
              },
              "Directives": null,
              "Position": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Type",
            "Elem": null,
            "NonNull": true,
            "Position": null
          },
          "Directives": null,
          "Position": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 5,
        "End": 10,
        "Line": 1,
        "Column": 6,
        "Src": {
          "Name": "graphql/schema/query.graphqls",
          "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false
    },
    "String": {
      "Kind": "SCALAR",
      "Description": "The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
      "Name": "String",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 650,
        "End": 656,
        "Line": 10,
        "Column": 8,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true
    },
    "Timestamp": {
      "Kind": "SCALAR",
      "Description": "",
      "Name": "Timestamp",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 65,
        "End": 74,
        "Line": 7,
        "Column": 8,
        "Src": {
          "Name": "graphql/schema/schema.graphqls",
          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false
    },
    "UUID": {
      "Kind": "SCALAR",
      "Description": "",
      "Name": "UUID",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 53,
        "End": 57,
        "Line": 6,
        "Column": 8,
        "Src": {
          "Name": "graphql/schema/schema.graphqls",
          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false
    },
    "UpdateProductInput": {
      "Kind": "INPUT_OBJECT",
      "Description": "",
      "Name": "UpdateProductInput",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "productID",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "UUID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 46,
              "End": 50,
              "Line": 3,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/inputs.graphqls",
                "Input": "input UpdateProductInput {\n\tproductID: UUID!\n\tname: String!\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 28,
            "End": 37,
            "Line": 2,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/inputs.graphqls",
              "Input": "input UpdateProductInput {\n\tproductID: UUID!\n\tname: String!\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 60,
              "End": 61,
              "Line": 4,
              "Column": 1,
              "Src": {
                "Name": "graphql/schema/inputs.graphqls",
                "Input": "input UpdateProductInput {\n\tproductID: UUID!\n\tname: String!\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 46,
            "End": 50,
            "Line": 3,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/inputs.graphqls",
              "Input": "input UpdateProductInput {\n\tproductID: UUID!\n\tname: String!\n}\n",
              "BuiltIn": false
            }
          }
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 6,
        "End": 24,
        "Line": 1,
        "Column": 7,
        "Src": {
          "Name": "graphql/schema/inputs.graphqls",
          "Input": "input UpdateProductInput {\n\tproductID: UUID!\n\tname: String!\n}\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false
    },
    "User": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "User",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "userID",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "UUID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 27,
              "End": 28,
              "Line": 2,
              "Column": 16,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "User/UserID",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 42,
                      "End": 55,
                      "Line": 2,
                      "Column": 32,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 35,
                    "End": 40,
                    "Line": 2,
                    "Column": 24,
                    "Src": {
                      "Name": "graphql/schema/user.graphqls",
                      "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 28,
                "End": 34,
                "Line": 2,
                "Column": 17,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 13,
            "End": 19,
            "Line": 2,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/user.graphqls",
              "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "userName",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 76,
              "End": 77,
              "Line": 3,
              "Column": 20,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "User/UserName",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 91,
                      "End": 106,
                      "Line": 3,
                      "Column": 36,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 84,
                    "End": 89,
                    "Line": 3,
                    "Column": 28,
                    "Src": {
                      "Name": "graphql/schema/user.graphqls",
                      "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 77,
                "End": 83,
                "Line": 3,
                "Column": 21,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 58,
            "End": 66,
            "Line": 3,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/user.graphqls",
              "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "firstName",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 128,
              "End": 129,
              "Line": 4,
              "Column": 21,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "User/FirstName",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 143,
                      "End": 159,
                      "Line": 4,
                      "Column": 37,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 136,
                    "End": 141,
                    "Line": 4,
                    "Column": 29,
                    "Src": {
                      "Name": "graphql/schema/user.graphqls",
                      "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 129,
                "End": 135,
                "Line": 4,
                "Column": 22,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 109,
            "End": 118,
            "Line": 4,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/user.graphqls",
              "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "lastName",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 180,
              "End": 181,
              "Line": 5,
              "Column": 20,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "User/LastName",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 195,
                      "End": 210,
                      "Line": 5,
                      "Column": 36,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 188,
                    "End": 193,
                    "Line": 5,
                    "Column": 28,
                    "Src": {
                      "Name": "graphql/schema/user.graphqls",
                      "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 181,
                "End": 187,
                "Line": 5,
                "Column": 21,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 162,
            "End": 170,
            "Line": 5,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/user.graphqls",
              "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "dob",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Timestamp",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 229,
              "End": 230,
              "Line": 6,
              "Column": 18,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "User/DOB",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 244,
                      "End": 254,
                      "Line": 6,
                      "Column": 34,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 237,
                    "End": 242,
                    "Line": 6,
                    "Column": 26,
                    "Src": {
                      "Name": "graphql/schema/user.graphqls",
                      "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 230,
                "End": 236,
                "Line": 6,
                "Column": 19,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 213,
            "End": 216,
            "Line": 6,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/user.graphqls",
              "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "updatedAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Timestamp",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 268,
              "End": 277,
              "Line": 7,
              "Column": 13,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "User/UpdatedAt",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 293,
                      "End": 309,
                      "Line": 7,
                      "Column": 39,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 286,
                    "End": 291,
                    "Line": 7,
                    "Column": 31,
                    "Src": {
                      "Name": "graphql/schema/user.graphqls",
                      "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 279,
                "End": 285,
                "Line": 7,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 257,
            "End": 266,
            "Line": 7,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/user.graphqls",
              "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "createdAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Timestamp",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 334,
              "End": 335,
              "Line": 8,
              "Column": 24,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "object",
              "Arguments": [
                {
                  "Name": "field",
                  "Value": {
                    "Raw": "User/CreatedAt",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 349,
                      "End": 365,
                      "Line": 8,
                      "Column": 40,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 342,
                    "End": 347,
                    "Line": 8,
                    "Column": 32,
                    "Src": {
                      "Name": "graphql/schema/user.graphqls",
                      "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 335,
                "End": 341,
                "Line": 8,
                "Column": 25,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "object",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "field",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 229,
                        "End": 230,
                        "Line": 11,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 215,
                      "End": 220,
                      "Line": 11,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 208,
                  "End": 214,
                  "Line": 11,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 312,
            "End": 321,
            "Line": 8,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/user.graphqls",
              "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "contacts",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "Contact",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 388,
                "End": 389,
                "Line": 10,
                "Column": 21,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "NonNull": true,
            "Position": {
              "Start": 391,
              "End": 392,
              "Line": 10,
              "Column": 24,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "retrieve",
              "Arguments": [
                {
                  "Name": "key",
                  "Value": {
                    "Raw": "Contact/AllByUserID",
                    "Children": null,
                    "Kind": 3,
                    "Position": {
                      "Start": 406,
                      "End": 427,
                      "Line": 10,
                      "Column": 40,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 401,
                    "End": 404,
                    "Line": 10,
                    "Column": 34,
                    "Src": {
                      "Name": "graphql/schema/user.graphqls",
                      "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                },
                {
                  "Name": "args",
                  "Value": {
                    "Raw": "",
                    "Children": [
                      {
                        "Name": "",
                        "Value": {
                          "Raw": "userID=User/UserID",
                          "Children": null,
                          "Kind": 3,
                          "Position": {
                            "Start": 436,
                            "End": 456,
                            "Line": 10,
                            "Column": 70,
                            "Src": {
                              "Name": "graphql/schema/user.graphqls",
                              "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                              "BuiltIn": false
                            }
                          },
                          "Definition": null,
                          "VariableDefinition": null,
                          "ExpectedType": null
                        },
                        "Position": null
                      }
                    ],
                    "Kind": 8,
                    "Position": {
                      "Start": 435,
                      "End": 436,
                      "Line": 10,
                      "Column": 68,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    },
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 429,
                    "End": 433,
                    "Line": 10,
                    "Column": 62,
                    "Src": {
                      "Name": "graphql/schema/user.graphqls",
                      "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                }
              ],
              "Position": {
                "Start": 392,
                "End": 400,
                "Line": 10,
                "Column": 25,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "key",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "String",
                      "Elem": null,
                      "NonNull": true,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 271,
                      "End": 274,
                      "Line": 12,
                      "Column": 21,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  {
                    "Description": "",
                    "Name": "args",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "",
                      "Elem": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 299,
                          "End": 300,
                          "Line": 12,
                          "Column": 49,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "NonNull": false,
                      "Position": {
                        "Start": 292,
                        "End": 298,
                        "Line": 12,
                        "Column": 42,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 285,
                      "End": 289,
                      "Line": 12,
                      "Column": 35,
                      "Src": {
                        "Name": "graphql/schema/schema.graphqls",
                        "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "Position": {
                  "Start": 262,
                  "End": 270,
                  "Line": 12,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/schema.graphqls",
                    "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                }
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 369,
            "End": 377,
            "Line": 10,
            "Column": 2,
            "Src": {
              "Name": "graphql/schema/user.graphqls",
              "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
              "BuiltIn": false
            }
          }
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 5,
        "End": 9,
        "Line": 1,
        "Column": 6,
        "Src": {
          "Name": "graphql/schema/user.graphqls",
          "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false
    },
    "__Directive": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "__Directive",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 3057,
              "End": 3068,
              "Line": 95,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3039,
            "End": 3043,
            "Line": 94,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "description",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 3070,
              "End": 3076,
              "Line": 95,
              "Column": 18,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3057,
            "End": 3068,
            "Line": 95,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "locations",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__DirectiveLocation",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3113,
                "End": 3114,
                "Line": 96,
                "Column": 37,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": true,
            "Position": {
              "Start": 3120,
              "End": 3124,
              "Line": 97,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3081,
            "End": 3090,
            "Line": 96,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "args",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__InputValue",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3140,
                "End": 3141,
                "Line": 97,
                "Column": 25,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": true,
            "Position": {
              "Start": 3143,
              "End": 3144,
              "Line": 98,
              "Column": 1,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3120,
            "End": 3124,
            "Line": 97,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 3021,
        "End": 3032,
        "Line": 93,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true
    },
    "__DirectiveLocation": {
      "Kind": "ENUM",
      "Description": "",
      "Name": "__DirectiveLocation",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": [
        {
          "Description": "",
          "Name": "QUERY",
          "Directives": null,
          "Position": {
            "Start": 3177,
            "End": 3182,
            "Line": 101,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "MUTATION",
          "Directives": null,
          "Position": {
            "Start": 3187,
            "End": 3195,
            "Line": 102,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "SUBSCRIPTION",
          "Directives": null,
          "Position": {
            "Start": 3200,
            "End": 3212,
            "Line": 103,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "FIELD",
          "Directives": null,
          "Position": {
            "Start": 3217,
            "End": 3222,
            "Line": 104,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "FRAGMENT_DEFINITION",
          "Directives": null,
          "Position": {
            "Start": 3227,
            "End": 3246,
            "Line": 105,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "FRAGMENT_SPREAD",
          "Directives": null,
          "Position": {
            "Start": 3251,
            "End": 3266,
            "Line": 106,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "INLINE_FRAGMENT",
          "Directives": null,
          "Position": {
            "Start": 3271,
            "End": 3286,
            "Line": 107,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "SCHEMA",
          "Directives": null,
          "Position": {
            "Start": 3291,
            "End": 3297,
            "Line": 108,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "SCALAR",
          "Directives": null,
          "Position": {
            "Start": 3302,
            "End": 3308,
            "Line": 109,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "OBJECT",
          "Directives": null,
          "Position": {
            "Start": 3313,
            "End": 3319,
            "Line": 110,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "FIELD_DEFINITION",
          "Directives": null,
          "Position": {
            "Start": 3324,
            "End": 3340,
            "Line": 111,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "ARGUMENT_DEFINITION",
          "Directives": null,
          "Position": {
            "Start": 3345,
            "End": 3364,
            "Line": 112,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "INTERFACE",
          "Directives": null,
          "Position": {
            "Start": 3369,
            "End": 3378,
            "Line": 113,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "UNION",
          "Directives": null,
          "Position": {
            "Start": 3383,
            "End": 3388,
            "Line": 114,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "ENUM",
          "Directives": null,
          "Position": {
            "Start": 3393,
            "End": 3397,
            "Line": 115,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "ENUM_VALUE",
          "Directives": null,
          "Position": {
            "Start": 3402,
            "End": 3412,
            "Line": 116,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "INPUT_OBJECT",
          "Directives": null,
          "Position": {
            "Start": 3417,
            "End": 3429,
            "Line": 117,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "INPUT_FIELD_DEFINITION",
          "Directives": null,
          "Position": {
            "Start": 3434,
            "End": 3456,
            "Line": 118,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        }
      ],
      "Position": {
        "Start": 3151,
        "End": 3170,
        "Line": 100,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true
    },
    "__EnumValue": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "__EnumValue",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 2821,
              "End": 2832,
              "Line": 77,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2803,
            "End": 2807,
            "Line": 76,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "description",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 2834,
              "End": 2840,
              "Line": 77,
              "Column": 18,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2821,
            "End": 2832,
            "Line": 77,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "isDeprecated",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 2872,
              "End": 2889,
              "Line": 79,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2845,
            "End": 2857,
            "Line": 78,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "deprecationReason",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 2891,
              "End": 2897,
              "Line": 79,
              "Column": 24,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2872,
            "End": 2889,
            "Line": 79,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 2785,
        "End": 2796,
        "Line": 75,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true
    },
    "__Field": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "__Field",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 2547,
              "End": 2558,
              "Line": 61,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2529,
            "End": 2533,
            "Line": 60,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "description",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 2560,
              "End": 2566,
              "Line": 61,
              "Column": 18,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2547,
            "End": 2558,
            "Line": 61,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "args",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__InputValue",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2591,
                "End": 2592,
                "Line": 62,
                "Column": 25,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": true,
            "Position": {
              "Start": 2598,
              "End": 2602,
              "Line": 63,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2571,
            "End": 2575,
            "Line": 62,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "type",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Type",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 2616,
              "End": 2628,
              "Line": 64,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2598,
            "End": 2602,
            "Line": 63,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "isDeprecated",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 2643,
              "End": 2660,
              "Line": 65,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2616,
            "End": 2628,
            "Line": 64,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "deprecationReason",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 2662,
              "End": 2668,
              "Line": 65,
              "Column": 24,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2643,
            "End": 2660,
            "Line": 65,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 2515,
        "End": 2522,
        "Line": 59,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true
    },
    "__InputValue": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "__InputValue",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 2714,
              "End": 2725,
              "Line": 70,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2696,
            "End": 2700,
            "Line": 69,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "description",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 2727,
              "End": 2733,
              "Line": 70,
              "Column": 18,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2714,
            "End": 2725,
            "Line": 70,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "type",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Type",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 2756,
              "End": 2768,
              "Line": 72,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2738,
            "End": 2742,
            "Line": 71,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "defaultValue",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 2770,
              "End": 2776,
              "Line": 72,
              "Column": 19,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2756,
            "End": 2768,
            "Line": 72,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 2677,
        "End": 2689,
        "Line": 68,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true
    },
    "__Schema": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "__Schema",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "types",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 1926,
                "End": 1927,
                "Line": 28,
                "Column": 20,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": true,
            "Position": {
              "Start": 1933,
              "End": 1942,
              "Line": 29,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 1911,
            "End": 1916,
            "Line": 28,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "queryType",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Type",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 1956,
              "End": 1968,
              "Line": 30,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 1933,
            "End": 1942,
            "Line": 29,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "mutationType",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Type",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 1970,
              "End": 1976,
              "Line": 30,
              "Column": 19,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 1956,
            "End": 1968,
            "Line": 30,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "subscriptionType",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Type",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 1999,
              "End": 2005,
              "Line": 31,
              "Column": 23,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 1981,
            "End": 1997,
            "Line": 31,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "directives",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__Directive",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2035,
                "End": 2036,
                "Line": 32,
                "Column": 30,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": true,
            "Position": {
              "Start": 2038,
              "End": 2039,
              "Line": 33,
              "Column": 1,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2010,
            "End": 2020,
            "Line": 32,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 1896,
        "End": 1904,
        "Line": 27,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true
    },
    "__Type": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "__Type",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "kind",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__TypeKind",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 2081,
              "End": 2085,
              "Line": 37,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2059,
            "End": 2063,
            "Line": 36,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 2087,
              "End": 2093,
              "Line": 37,
              "Column": 11,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2081,
            "End": 2085,
            "Line": 37,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "description",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 2111,
              "End": 2117,
              "Line": 38,
              "Column": 18,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2098,
            "End": 2109,
            "Line": 38,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "fields",
          "Arguments": [
            {
              "Description": "",
              "Name": "includeDeprecated",
              "DefaultValue": {
                "Raw": "false",
                "Children": null,
                "Kind": 5,
                "Position": {
                  "Start": 2191,
                  "End": 2196,
                  "Line": 41,
                  "Column": 41,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                },
                "Definition": null,
                "VariableDefinition": null,
                "ExpectedType": null
              },
              "Type": {
                "NamedType": "Boolean",
                "Elem": null,
                "NonNull": false,
                "Position": {
                  "Start": 2181,
                  "End": 2188,
                  "Line": 41,
                  "Column": 31,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 2162,
                "End": 2179,
                "Line": 41,
                "Column": 12,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__Field",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2208,
                "End": 2209,
                "Line": 41,
                "Column": 58,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 2200,
              "End": 2207,
              "Line": 41,
              "Column": 50,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2155,
            "End": 2161,
            "Line": 41,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "interfaces",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2253,
                "End": 2254,
                "Line": 44,
                "Column": 25,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 2246,
              "End": 2252,
              "Line": 44,
              "Column": 18,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2233,
            "End": 2243,
            "Line": 44,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "possibleTypes",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2314,
                "End": 2315,
                "Line": 47,
                "Column": 28,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 2307,
              "End": 2313,
              "Line": 47,
              "Column": 21,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2291,
            "End": 2304,
            "Line": 47,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "enumValues",
          "Arguments": [
            {
              "Description": "",
              "Name": "includeDeprecated",
              "DefaultValue": {
                "Raw": "false",
                "Children": null,
                "Kind": 5,
                "Position": {
                  "Start": 2377,
                  "End": 2382,
                  "Line": 50,
                  "Column": 45,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                },
                "Definition": null,
                "VariableDefinition": null,
                "ExpectedType": null
              },
              "Type": {
                "NamedType": "Boolean",
                "Elem": null,
                "NonNull": false,
                "Position": {
                  "Start": 2367,
                  "End": 2374,
                  "Line": 50,
                  "Column": 35,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 2348,
                "End": 2365,
                "Line": 50,
                "Column": 16,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__EnumValue",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2398,
                "End": 2399,
                "Line": 50,
                "Column": 66,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 2386,
              "End": 2397,
              "Line": 50,
              "Column": 54,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2337,
            "End": 2347,
            "Line": 50,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "inputFields",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__InputValue",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2456,
                "End": 2457,
                "Line": 53,
                "Column": 32,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 2443,
              "End": 2455,
              "Line": 53,
              "Column": 19,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2429,
            "End": 2440,
            "Line": 53,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "ofType",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Type",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 2500,
              "End": 2506,
              "Line": 56,
              "Column": 13,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2492,
            "End": 2498,
            "Line": 56,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 2046,
        "End": 2052,
        "Line": 35,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true
    },
    "__TypeKind": {
      "Kind": "ENUM",
      "Description": "",
      "Name": "__TypeKind",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": [
        {
          "Description": "",
          "Name": "SCALAR",
          "Directives": null,
          "Position": {
            "Start": 2923,
            "End": 2929,
            "Line": 83,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "OBJECT",
          "Directives": null,
          "Position": {
            "Start": 2934,
            "End": 2940,
            "Line": 84,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "INTERFACE",
          "Directives": null,
          "Position": {
            "Start": 2945,
            "End": 2954,
            "Line": 85,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "UNION",
          "Directives": null,
          "Position": {
            "Start": 2959,
            "End": 2964,
            "Line": 86,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "ENUM",
          "Directives": null,
          "Position": {
            "Start": 2969,
            "End": 2973,
            "Line": 87,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "INPUT_OBJECT",
          "Directives": null,
          "Position": {
            "Start": 2978,
            "End": 2990,
            "Line": 88,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "LIST",
          "Directives": null,
          "Position": {
            "Start": 2995,
            "End": 2999,
            "Line": 89,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        },
        {
          "Description": "",
          "Name": "NON_NULL",
          "Directives": null,
          "Position": {
            "Start": 3004,
            "End": 3012,
            "Line": 90,
            "Column": 5,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        }
      ],
      "Position": {
        "Start": 2906,
        "End": 2916,
        "Line": 82,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true
    }
  },
  "Directives": {
    "arg": {
      "Description": "",
      "Name": "arg",
      "Arguments": [
        {
          "Description": "",
          "Name": "key",
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 349,
              "End": 350,
              "Line": 13,
              "Column": 28,
              "Src": {
                "Name": "graphql/schema/schema.graphqls",
                "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 337,
            "End": 340,
            "Line": 13,
            "Column": 16,
            "Src": {
              "Name": "graphql/schema/schema.graphqls",
              "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
              "BuiltIn": false
            }
          }
        }
      ],
      "Locations": [
        "ARGUMENT_DEFINITION",
        "FIELD_DEFINITION"
      ],
      "Position": {
        "Start": 333,
        "End": 336,
        "Line": 13,
        "Column": 12,
        "Src": {
          "Name": "graphql/schema/schema.graphqls",
          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
          "BuiltIn": false
        }
      }
    },
    "cache": {
      "Description": "",
      "Name": "cache",
      "Arguments": [
        {
          "Description": "",
          "Name": "ttl",
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 166,
              "End": 167,
              "Line": 10,
              "Column": 30,
              "Src": {
                "Name": "graphql/schema/schema.graphqls",
                "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 154,
            "End": 157,
            "Line": 10,
            "Column": 18,
            "Src": {
              "Name": "graphql/schema/schema.graphqls",
              "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
              "BuiltIn": false
            }
          }
        }
      ],
      "Locations": [
        "FIELD_DEFINITION",
        "OBJECT"
      ],
      "Position": {
        "Start": 148,
        "End": 153,
        "Line": 10,
        "Column": 12,
        "Src": {
          "Name": "graphql/schema/schema.graphqls",
          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
          "BuiltIn": false
        }
      }
    },
    "deprecated": {
      "Description": "The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.",
      "Name": "deprecated",
      "Arguments": [
        {
          "Description": "",
          "Name": "reason",
          "DefaultValue": {
            "Raw": "No longer supported",
            "Children": null,
            "Kind": 3,
            "Position": {
              "Start": 1834,
              "End": 1855,
              "Line": 25,
              "Column": 41,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "Definition": null,
            "VariableDefinition": null,
            "ExpectedType": null
          },
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 1825,
              "End": 1831,
              "Line": 25,
              "Column": 31,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 1817,
            "End": 1823,
            "Line": 25,
            "Column": 23,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        }
      ],
      "Locations": [
        "FIELD_DEFINITION",
        "ENUM_VALUE"
      ],
      "Position": {
        "Start": 1806,
        "End": 1816,
        "Line": 25,
        "Column": 12,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      }
    },
    "include": {
      "Description": "The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.",
      "Name": "include",
      "Arguments": [
        {
          "Description": "",
          "Name": "if",
          "DefaultValue": null,
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 1289,
              "End": 1290,
              "Line": 19,
              "Column": 32,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 1277,
            "End": 1279,
            "Line": 19,
            "Column": 20,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        }
      ],
      "Locations": [
        "FIELD",
        "FRAGMENT_SPREAD",
        "INLINE_FRAGMENT"
      ],
      "Position": {
        "Start": 1269,
        "End": 1276,
        "Line": 19,
        "Column": 12,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      }
    },
    "object": {
      "Description": "",
      "Name": "object",
      "Arguments": [
        {
          "Description": "",
          "Name": "field",
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 229,
              "End": 230,
              "Line": 11,
              "Column": 33,
              "Src": {
                "Name": "graphql/schema/schema.graphqls",
                "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 215,
            "End": 220,
            "Line": 11,
            "Column": 19,
            "Src": {
              "Name": "graphql/schema/schema.graphqls",
              "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
              "BuiltIn": false
            }
          }
        }
      ],
      "Locations": [
        "FIELD_DEFINITION"
      ],
      "Position": {
        "Start": 208,
        "End": 214,
        "Line": 11,
        "Column": 12,
        "Src": {
          "Name": "graphql/schema/schema.graphqls",
          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
          "BuiltIn": false
        }
      }
    },
    "primary": {
      "Description": "",
      "Name": "primary",
      "Arguments": null,
      "Locations": [
        "FIELD_DEFINITION",
        "ARGUMENT_DEFINITION"
      ],
      "Position": {
        "Start": 87,
        "End": 94,
        "Line": 9,
        "Column": 12,
        "Src": {
          "Name": "graphql/schema/schema.graphqls",
          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
          "BuiltIn": false
        }
      }
    },
    "retrieve": {
      "Description": "",
      "Name": "retrieve",
      "Arguments": [
        {
          "Description": "",
          "Name": "key",
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 285,
              "End": 289,
              "Line": 12,
              "Column": 35,
              "Src": {
                "Name": "graphql/schema/schema.graphqls",
                "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 271,
            "End": 274,
            "Line": 12,
            "Column": 21,
            "Src": {
              "Name": "graphql/schema/schema.graphqls",
              "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
              "BuiltIn": false
            }
          }
        },
        {
          "Description": "",
          "Name": "args",
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 299,
                "End": 300,
                "Line": 12,
                "Column": 49,
                "Src": {
                  "Name": "graphql/schema/schema.graphqls",
                  "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                  "BuiltIn": false
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 292,
              "End": 298,
              "Line": 12,
              "Column": 42,
              "Src": {
                "Name": "graphql/schema/schema.graphqls",
                "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 285,
            "End": 289,
            "Line": 12,
            "Column": 35,
            "Src": {
              "Name": "graphql/schema/schema.graphqls",
              "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
              "BuiltIn": false
            }
          }
        }
      ],
      "Locations": [
        "FIELD_DEFINITION"
      ],
      "Position": {
        "Start": 262,
        "End": 270,
        "Line": 12,
        "Column": 12,
        "Src": {
          "Name": "graphql/schema/schema.graphqls",
          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
          "BuiltIn": false
        }
      }
    },
    "skip": {
      "Description": "The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.",
      "Name": "skip",
      "Arguments": [
        {
          "Description": "",
          "Name": "if",
          "DefaultValue": null,
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 1542,
              "End": 1543,
              "Line": 22,
              "Column": 29,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 1530,
            "End": 1532,
            "Line": 22,
            "Column": 17,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          }
        }
      ],
      "Locations": [
        "FIELD",
        "FRAGMENT_SPREAD",
        "INLINE_FRAGMENT"
      ],
      "Position": {
        "Start": 1525,
        "End": 1529,
        "Line": 22,
        "Column": 12,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      }
    }
  },
  "PossibleTypes": {
    "Brand": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "Brand",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "brandID",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "UUID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 29,
                "End": 30,
                "Line": 2,
                "Column": 17,
                "Src": {
                  "Name": "graphql/schema/brand.graphqls",
                  "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Brand/BrandID",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 44,
                        "End": 59,
                        "Line": 2,
                        "Column": 33,
                        "Src": {
                          "Name": "graphql/schema/brand.graphqls",
                          "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 37,
                      "End": 42,
                      "Line": 2,
                      "Column": 25,
                      "Src": {
                        "Name": "graphql/schema/brand.graphqls",
                        "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 30,
                  "End": 36,
                  "Line": 2,
                  "Column": 18,
                  "Src": {
                    "Name": "graphql/schema/brand.graphqls",
                    "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 14,
              "End": 21,
              "Line": 2,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/brand.graphqls",
                "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 76,
                "End": 77,
                "Line": 3,
                "Column": 16,
                "Src": {
                  "Name": "graphql/schema/brand.graphqls",
                  "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Brand/Name",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 91,
                        "End": 103,
                        "Line": 3,
                        "Column": 32,
                        "Src": {
                          "Name": "graphql/schema/brand.graphqls",
                          "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 84,
                      "End": 89,
                      "Line": 3,
                      "Column": 24,
                      "Src": {
                        "Name": "graphql/schema/brand.graphqls",
                        "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 77,
                  "End": 83,
                  "Line": 3,
                  "Column": 17,
                  "Src": {
                    "Name": "graphql/schema/brand.graphqls",
                    "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 62,
              "End": 66,
              "Line": 3,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/brand.graphqls",
                "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "updatedAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Timestamp",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 117,
                "End": 126,
                "Line": 4,
                "Column": 13,
                "Src": {
                  "Name": "graphql/schema/brand.graphqls",
                  "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Brand/UpdatedAt",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 142,
                        "End": 159,
                        "Line": 4,
                        "Column": 39,
                        "Src": {
                          "Name": "graphql/schema/brand.graphqls",
                          "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 135,
                      "End": 140,
                      "Line": 4,
                      "Column": 31,
                      "Src": {
                        "Name": "graphql/schema/brand.graphqls",
                        "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 128,
                  "End": 134,
                  "Line": 4,
                  "Column": 24,
                  "Src": {
                    "Name": "graphql/schema/brand.graphqls",
                    "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 106,
              "End": 115,
              "Line": 4,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/brand.graphqls",
                "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "createdAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Timestamp",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 184,
                "End": 185,
                "Line": 5,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/brand.graphqls",
                  "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Brand/CreatedAt",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 199,
                        "End": 216,
                        "Line": 5,
                        "Column": 40,
                        "Src": {
                          "Name": "graphql/schema/brand.graphqls",
                          "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 192,
                      "End": 197,
                      "Line": 5,
                      "Column": 32,
                      "Src": {
                        "Name": "graphql/schema/brand.graphqls",
                        "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 185,
                  "End": 191,
                  "Line": 5,
                  "Column": 25,
                  "Src": {
                    "Name": "graphql/schema/brand.graphqls",
                    "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 162,
              "End": 171,
              "Line": 5,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/brand.graphqls",
                "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 5,
          "End": 10,
          "Line": 1,
          "Column": 6,
          "Src": {
            "Name": "graphql/schema/brand.graphqls",
            "Input": "type Brand {\n\tbrandID: UUID!
		@object(field: \"Brand/BrandID\")\n\tname: String!
		@object(field: \"Brand/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Brand/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Brand/CreatedAt\")\n}\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false
      }
    ],
    "Category": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "Category",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "categoryID",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "UUID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 35,
                "End": 36,
                "Line": 2,
                "Column": 20,
                "Src": {
                  "Name": "graphql/schema/category.graphqls",
                  "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Category/CategoryID",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 50,
                        "End": 71,
                        "Line": 2,
                        "Column": 36,
                        "Src": {
                          "Name": "graphql/schema/category.graphqls",
                          "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 43,
                      "End": 48,
                      "Line": 2,
                      "Column": 28,
                      "Src": {
                        "Name": "graphql/schema/category.graphqls",
                        "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 36,
                  "End": 42,
                  "Line": 2,
                  "Column": 21,
                  "Src": {
                    "Name": "graphql/schema/category.graphqls",
                    "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 17,
              "End": 27,
              "Line": 2,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/category.graphqls",
                "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 88,
                "End": 89,
                "Line": 3,
                "Column": 16,
                "Src": {
                  "Name": "graphql/schema/category.graphqls",
                  "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Category/Name",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 103,
                        "End": 118,
                        "Line": 3,
                        "Column": 32,
                        "Src": {
                          "Name": "graphql/schema/category.graphqls",
                          "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 96,
                      "End": 101,
                      "Line": 3,
                      "Column": 24,
                      "Src": {
                        "Name": "graphql/schema/category.graphqls",
                        "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 89,
                  "End": 95,
                  "Line": 3,
                  "Column": 17,
                  "Src": {
                    "Name": "graphql/schema/category.graphqls",
                    "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 74,
              "End": 78,
              "Line": 3,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/category.graphqls",
                "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "updatedAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Timestamp",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 132,
                "End": 141,
                "Line": 4,
                "Column": 13,
                "Src": {
                  "Name": "graphql/schema/category.graphqls",
                  "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Category/UpdatedAt",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 157,
                        "End": 177,
                        "Line": 4,
                        "Column": 39,
                        "Src": {
                          "Name": "graphql/schema/category.graphqls",
                          "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 150,
                      "End": 155,
                      "Line": 4,
                      "Column": 31,
                      "Src": {
                        "Name": "graphql/schema/category.graphqls",
                        "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 143,
                  "End": 149,
                  "Line": 4,
                  "Column": 24,
                  "Src": {
                    "Name": "graphql/schema/category.graphqls",
                    "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 121,
              "End": 130,
              "Line": 4,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/category.graphqls",
                "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "createdAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Timestamp",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 202,
                "End": 203,
                "Line": 5,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/category.graphqls",
                  "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Category/CreatedAt",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 217,
                        "End": 237,
                        "Line": 5,
                        "Column": 40,
                        "Src": {
                          "Name": "graphql/schema/category.graphqls",
                          "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 210,
                      "End": 215,
                      "Line": 5,
                      "Column": 32,
                      "Src": {
                        "Name": "graphql/schema/category.graphqls",
                        "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 203,
                  "End": 209,
                  "Line": 5,
                  "Column": 25,
                  "Src": {
                    "Name": "graphql/schema/category.graphqls",
                    "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 180,
              "End": 189,
              "Line": 5,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/category.graphqls",
                "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "classification",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Classification",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 273,
                "End": 274,
                "Line": 7,
                "Column": 34,
                "Src": {
                  "Name": "graphql/schema/category.graphqls",
                  "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Name": "key",
                    "Value": {
                      "Raw": "Classification/ByID",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 288,
                        "End": 309,
                        "Line": 7,
                        "Column": 50,
                        "Src": {
                          "Name": "graphql/schema/category.graphqls",
                          "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 283,
                      "End": 286,
                      "Line": 7,
                      "Column": 44,
                      "Src": {
                        "Name": "graphql/schema/category.graphqls",
                        "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  {
                    "Name": "args",
                    "Value": {
                      "Raw": "",
                      "Children": [
                        {
                          "Name": "",
                          "Value": {
                            "Raw": "primary=Category/ClassificationID",
                            "Children": null,
                            "Kind": 3,
                            "Position": {
                              "Start": 318,
                              "End": 353,
                              "Line": 7,
                              "Column": 80,
                              "Src": {
                                "Name": "graphql/schema/category.graphqls",
                                "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                                "BuiltIn": false
                              }
                            },
                            "Definition": null,
                            "VariableDefinition": null,
                            "ExpectedType": null
                          },
                          "Position": null
                        }
                      ],
                      "Kind": 8,
                      "Position": {
                        "Start": 317,
                        "End": 318,
                        "Line": 7,
                        "Column": 78,
                        "Src": {
                          "Name": "graphql/schema/category.graphqls",
                          "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 311,
                      "End": 315,
                      "Line": 7,
                      "Column": 72,
                      "Src": {
                        "Name": "graphql/schema/category.graphqls",
                        "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 274,
                  "End": 282,
                  "Line": 7,
                  "Column": 35,
                  "Src": {
                    "Name": "graphql/schema/category.graphqls",
                    "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "retrieve",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "key",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 285,
                          "End": 289,
                          "Line": 12,
                          "Column": 35,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 271,
                        "End": 274,
                        "Line": 12,
                        "Column": 21,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    {
                      "Description": "",
                      "Name": "args",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "",
                        "Elem": {
                          "NamedType": "String",
                          "Elem": null,
                          "NonNull": true,
                          "Position": {
                            "Start": 299,
                            "End": 300,
                            "Line": 12,
                            "Column": 49,
                            "Src": {
                              "Name": "graphql/schema/schema.graphqls",
                              "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                              "BuiltIn": false
                            }
                          }
                        },
                        "NonNull": false,
                        "Position": {
                          "Start": 292,
                          "End": 298,
                          "Line": 12,
                          "Column": 42,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 262,
                    "End": 270,
                    "Line": 12,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 241,
              "End": 255,
              "Line": 7,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/category.graphqls",
                "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
                "BuiltIn": false
              }
            }
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 5,
          "End": 13,
          "Line": 1,
          "Column": 6,
          "Src": {
            "Name": "graphql/schema/category.graphqls",
            "Input": "type Category {\n\tcategoryID: UUID!
		@object(field: \"Category/CategoryID\")\n\tname: String!
		@object(field: \"Category/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Category/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Category/CreatedAt\")\n\n\tclassification: Classification! @retrieve(key: \"Classification/ByID\", args: [\"primary=Category/ClassificationID\"])\n}\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false
      }
    ],
    "Classification": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "Classification",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "classificationID",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "UUID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 47,
                "End": 48,
                "Line": 2,
                "Column": 26,
                "Src": {
                  "Name": "graphql/schema/classification.graphqls",
                  "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Classification/ClassificationID",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 62,
                        "End": 95,
                        "Line": 2,
                        "Column": 42,
                        "Src": {
                          "Name": "graphql/schema/classification.graphqls",
                          "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 55,
                      "End": 60,
                      "Line": 2,
                      "Column": 34,
                      "Src": {
                        "Name": "graphql/schema/classification.graphqls",
                        "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 48,
                  "End": 54,
                  "Line": 2,
                  "Column": 27,
                  "Src": {
                    "Name": "graphql/schema/classification.graphqls",
                    "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 23,
              "End": 39,
              "Line": 2,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/classification.graphqls",
                "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 112,
                "End": 113,
                "Line": 3,
                "Column": 16,
                "Src": {
                  "Name": "graphql/schema/classification.graphqls",
                  "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Classification/Name",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 127,
                        "End": 148,
                        "Line": 3,
                        "Column": 32,
                        "Src": {
                          "Name": "graphql/schema/classification.graphqls",
                          "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 120,
                      "End": 125,
                      "Line": 3,
                      "Column": 24,
                      "Src": {
                        "Name": "graphql/schema/classification.graphqls",
                        "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 113,
                  "End": 119,
                  "Line": 3,
                  "Column": 17,
                  "Src": {
                    "Name": "graphql/schema/classification.graphqls",
                    "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 98,
              "End": 102,
              "Line": 3,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/classification.graphqls",
                "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "updatedAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Timestamp",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 162,
                "End": 171,
                "Line": 4,
                "Column": 13,
                "Src": {
                  "Name": "graphql/schema/classification.graphqls",
                  "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Classification/UpdatedAt",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 187,
                        "End": 213,
                        "Line": 4,
                        "Column": 39,
                        "Src": {
                          "Name": "graphql/schema/classification.graphqls",
                          "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 180,
                      "End": 185,
                      "Line": 4,
                      "Column": 31,
                      "Src": {
                        "Name": "graphql/schema/classification.graphqls",
                        "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 173,
                  "End": 179,
                  "Line": 4,
                  "Column": 24,
                  "Src": {
                    "Name": "graphql/schema/classification.graphqls",
                    "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 151,
              "End": 160,
              "Line": 4,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/classification.graphqls",
                "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "createdAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Timestamp",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 238,
                "End": 239,
                "Line": 5,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/classification.graphqls",
                  "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Classification/CreatedAt",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 253,
                        "End": 279,
                        "Line": 5,
                        "Column": 40,
                        "Src": {
                          "Name": "graphql/schema/classification.graphqls",
                          "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 246,
                      "End": 251,
                      "Line": 5,
                      "Column": 32,
                      "Src": {
                        "Name": "graphql/schema/classification.graphqls",
                        "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 239,
                  "End": 245,
                  "Line": 5,
                  "Column": 25,
                  "Src": {
                    "Name": "graphql/schema/classification.graphqls",
                    "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 216,
              "End": 225,
              "Line": 5,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/classification.graphqls",
                "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 5,
          "End": 19,
          "Line": 1,
          "Column": 6,
          "Src": {
            "Name": "graphql/schema/classification.graphqls",
            "Input": "type Classification {\n\tclassificationID: UUID!
		@object(field: \"Classification/ClassificationID\")\n\tname: String!
		@object(field: \"Classification/Name\")\n\tupdatedAt: Timestamp
		@object(field: \"Classification/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Classification/CreatedAt\")\n}\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false
      }
    ],
    "Contact": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "Contact",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "contactID",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "UUID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 33,
                "End": 34,
                "Line": 2,
                "Column": 19,
                "Src": {
                  "Name": "graphql/schema/contact.graphqls",
                  "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Contact/ContactID",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 48,
                        "End": 67,
                        "Line": 2,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/contact.graphqls",
                          "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 41,
                      "End": 46,
                      "Line": 2,
                      "Column": 27,
                      "Src": {
                        "Name": "graphql/schema/contact.graphqls",
                        "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 34,
                  "End": 40,
                  "Line": 2,
                  "Column": 20,
                  "Src": {
                    "Name": "graphql/schema/contact.graphqls",
                    "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 16,
              "End": 25,
              "Line": 2,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/contact.graphqls",
                "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "contactValue",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 92,
                "End": 93,
                "Line": 3,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/contact.graphqls",
                  "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Contact/ContactValue",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 107,
                        "End": 129,
                        "Line": 3,
                        "Column": 40,
                        "Src": {
                          "Name": "graphql/schema/contact.graphqls",
                          "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 100,
                      "End": 105,
                      "Line": 3,
                      "Column": 32,
                      "Src": {
                        "Name": "graphql/schema/contact.graphqls",
                        "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 93,
                  "End": 99,
                  "Line": 3,
                  "Column": 25,
                  "Src": {
                    "Name": "graphql/schema/contact.graphqls",
                    "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 70,
              "End": 82,
              "Line": 3,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/contact.graphqls",
                "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "contactType",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ContactType",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 158,
                "End": 159,
                "Line": 4,
                "Column": 28,
                "Src": {
                  "Name": "graphql/schema/contact.graphqls",
                  "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Contact/ContactType",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 173,
                        "End": 194,
                        "Line": 4,
                        "Column": 44,
                        "Src": {
                          "Name": "graphql/schema/contact.graphqls",
                          "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 166,
                      "End": 171,
                      "Line": 4,
                      "Column": 36,
                      "Src": {
                        "Name": "graphql/schema/contact.graphqls",
                        "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 159,
                  "End": 165,
                  "Line": 4,
                  "Column": 29,
                  "Src": {
                    "Name": "graphql/schema/contact.graphqls",
                    "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 132,
              "End": 143,
              "Line": 4,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/contact.graphqls",
                "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "updatedAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Timestamp",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 208,
                "End": 217,
                "Line": 5,
                "Column": 13,
                "Src": {
                  "Name": "graphql/schema/contact.graphqls",
                  "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Contact/UpdatedAt",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 233,
                        "End": 252,
                        "Line": 5,
                        "Column": 39,
                        "Src": {
                          "Name": "graphql/schema/contact.graphqls",
                          "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 226,
                      "End": 231,
                      "Line": 5,
                      "Column": 31,
                      "Src": {
                        "Name": "graphql/schema/contact.graphqls",
                        "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 219,
                  "End": 225,
                  "Line": 5,
                  "Column": 24,
                  "Src": {
                    "Name": "graphql/schema/contact.graphqls",
                    "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 197,
              "End": 206,
              "Line": 5,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/contact.graphqls",
                "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "createdAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Timestamp",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 277,
                "End": 278,
                "Line": 6,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/contact.graphqls",
                  "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Contact/CreatedAt",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 292,
                        "End": 311,
                        "Line": 6,
                        "Column": 40,
                        "Src": {
                          "Name": "graphql/schema/contact.graphqls",
                          "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 285,
                      "End": 290,
                      "Line": 6,
                      "Column": 32,
                      "Src": {
                        "Name": "graphql/schema/contact.graphqls",
                        "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 278,
                  "End": 284,
                  "Line": 6,
                  "Column": 25,
                  "Src": {
                    "Name": "graphql/schema/contact.graphqls",
                    "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 255,
              "End": 264,
              "Line": 6,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/contact.graphqls",
                "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
                "BuiltIn": false
              }
            }
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 5,
          "End": 12,
          "Line": 1,
          "Column": 6,
          "Src": {
            "Name": "graphql/schema/contact.graphqls",
            "Input": "type Contact {\n\tcontactID: UUID!
		@object(field: \"Contact/ContactID\")\n\tcontactValue: String!
		@object(field: \"Contact/ContactValue\")\n\tcontactType: ContactType!
		@object(field: \"Contact/ContactType\")\n\tupdatedAt: Timestamp
		@object(field: \"Contact/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Contact/CreatedAt\")\n}\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false
      }
    ],
    "Mutation": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "Mutation",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "clearCache",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Boolean",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 40,
                "End": 57,
                "Line": 4,
                "Column": 2,
                "Src": {
                  "Name": "graphql/schema/mutation.graphqls",
                  "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 17,
              "End": 27,
              "Line": 2,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/mutation.graphqls",
                "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "updateProductByID",
            "Arguments": [
              {
                "Description": "",
                "Name": "input",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "UpdateProductInput",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 84,
                    "End": 85,
                    "Line": 4,
                    "Column": 46,
                    "Src": {
                      "Name": "graphql/schema/mutation.graphqls",
                      "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 58,
                  "End": 63,
                  "Line": 4,
                  "Column": 20,
                  "Src": {
                    "Name": "graphql/schema/mutation.graphqls",
                    "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                    "BuiltIn": false
                  }
                }
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Product",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 96,
                "End": 97,
                "Line": 4,
                "Column": 58,
                "Src": {
                  "Name": "graphql/schema/mutation.graphqls",
                  "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Name": "key",
                    "Value": {
                      "Raw": "Product/ByID",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 111,
                        "End": 125,
                        "Line": 4,
                        "Column": 74,
                        "Src": {
                          "Name": "graphql/schema/mutation.graphqls",
                          "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 106,
                      "End": 109,
                      "Line": 4,
                      "Column": 68,
                      "Src": {
                        "Name": "graphql/schema/mutation.graphqls",
                        "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 97,
                  "End": 105,
                  "Line": 4,
                  "Column": 59,
                  "Src": {
                    "Name": "graphql/schema/mutation.graphqls",
                    "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "retrieve",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "key",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 285,
                          "End": 289,
                          "Line": 12,
                          "Column": 35,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 271,
                        "End": 274,
                        "Line": 12,
                        "Column": 21,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    {
                      "Description": "",
                      "Name": "args",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "",
                        "Elem": {
                          "NamedType": "String",
                          "Elem": null,
                          "NonNull": true,
                          "Position": {
                            "Start": 299,
                            "End": 300,
                            "Line": 12,
                            "Column": 49,
                            "Src": {
                              "Name": "graphql/schema/schema.graphqls",
                              "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                              "BuiltIn": false
                            }
                          }
                        },
                        "NonNull": false,
                        "Position": {
                          "Start": 292,
                          "End": 298,
                          "Line": 12,
                          "Column": 42,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 262,
                    "End": 270,
                    "Line": 12,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 40,
              "End": 57,
              "Line": 4,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/mutation.graphqls",
                "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
                "BuiltIn": false
              }
            }
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 5,
          "End": 13,
          "Line": 1,
          "Column": 6,
          "Src": {
            "Name": "graphql/schema/mutation.graphqls",
            "Input": "type Mutation {\n\tclearCache: Boolean!\n\n\tupdateProductByID(input: UpdateProductInput!): Product! @retrieve(key: \"Product/ByID\")\n}\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false
      }
    ],
    "Product": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "Product",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "productID",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "UUID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 33,
                "End": 34,
                "Line": 2,
                "Column": 19,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Product/ProductID",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 48,
                        "End": 67,
                        "Line": 2,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/product.graphqls",
                          "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 41,
                      "End": 46,
                      "Line": 2,
                      "Column": 27,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 34,
                  "End": 40,
                  "Line": 2,
                  "Column": 20,
                  "Src": {
                    "Name": "graphql/schema/product.graphqls",
                    "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 16,
              "End": 25,
              "Line": 2,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 84,
                "End": 85,
                "Line": 3,
                "Column": 16,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Product/Name",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 99,
                        "End": 113,
                        "Line": 3,
                        "Column": 32,
                        "Src": {
                          "Name": "graphql/schema/product.graphqls",
                          "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 92,
                      "End": 97,
                      "Line": 3,
                      "Column": 24,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 85,
                  "End": 91,
                  "Line": 3,
                  "Column": 17,
                  "Src": {
                    "Name": "graphql/schema/product.graphqls",
                    "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 70,
              "End": 74,
              "Line": 3,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "price",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Int",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 128,
                "End": 129,
                "Line": 4,
                "Column": 14,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Product/Price",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 143,
                        "End": 158,
                        "Line": 4,
                        "Column": 30,
                        "Src": {
                          "Name": "graphql/schema/product.graphqls",
                          "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 136,
                      "End": 141,
                      "Line": 4,
                      "Column": 22,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 129,
                  "End": 135,
                  "Line": 4,
                  "Column": 15,
                  "Src": {
                    "Name": "graphql/schema/product.graphqls",
                    "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 116,
              "End": 121,
              "Line": 4,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "promotionDiscount",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Int",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 180,
                "End": 183,
                "Line": 5,
                "Column": 21,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Product/PromotionDiscount",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 199,
                        "End": 226,
                        "Line": 5,
                        "Column": 41,
                        "Src": {
                          "Name": "graphql/schema/product.graphqls",
                          "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 192,
                      "End": 197,
                      "Line": 5,
                      "Column": 33,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 185,
                  "End": 191,
                  "Line": 5,
                  "Column": 26,
                  "Src": {
                    "Name": "graphql/schema/product.graphqls",
                    "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 161,
              "End": 178,
              "Line": 5,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "promotionDiscountMultiple",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Int",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 256,
                "End": 259,
                "Line": 6,
                "Column": 29,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Product/PromotionDiscountMultiple",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 275,
                        "End": 310,
                        "Line": 6,
                        "Column": 49,
                        "Src": {
                          "Name": "graphql/schema/product.graphqls",
                          "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 268,
                      "End": 273,
                      "Line": 6,
                      "Column": 41,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 261,
                  "End": 267,
                  "Line": 6,
                  "Column": 34,
                  "Src": {
                    "Name": "graphql/schema/product.graphqls",
                    "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 229,
              "End": 254,
              "Line": 6,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "volume",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Int",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 321,
                "End": 324,
                "Line": 7,
                "Column": 10,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Product/Volume",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 340,
                        "End": 356,
                        "Line": 7,
                        "Column": 30,
                        "Src": {
                          "Name": "graphql/schema/product.graphqls",
                          "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 333,
                      "End": 338,
                      "Line": 7,
                      "Column": 22,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 326,
                  "End": 332,
                  "Line": 7,
                  "Column": 15,
                  "Src": {
                    "Name": "graphql/schema/product.graphqls",
                    "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 313,
              "End": 319,
              "Line": 7,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "abv",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Int",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 364,
                "End": 367,
                "Line": 8,
                "Column": 7,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Product/ABV",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 383,
                        "End": 396,
                        "Line": 8,
                        "Column": 27,
                        "Src": {
                          "Name": "graphql/schema/product.graphqls",
                          "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 376,
                      "End": 381,
                      "Line": 8,
                      "Column": 19,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 369,
                  "End": 375,
                  "Line": 8,
                  "Column": 12,
                  "Src": {
                    "Name": "graphql/schema/product.graphqls",
                    "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 359,
              "End": 362,
              "Line": 8,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "updatedAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Timestamp",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 410,
                "End": 419,
                "Line": 9,
                "Column": 13,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Product/UpdatedAt",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 435,
                        "End": 454,
                        "Line": 9,
                        "Column": 39,
                        "Src": {
                          "Name": "graphql/schema/product.graphqls",
                          "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 428,
                      "End": 433,
                      "Line": 9,
                      "Column": 31,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 421,
                  "End": 427,
                  "Line": 9,
                  "Column": 24,
                  "Src": {
                    "Name": "graphql/schema/product.graphqls",
                    "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 399,
              "End": 408,
              "Line": 9,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "createdAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Timestamp",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 479,
                "End": 480,
                "Line": 10,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "Product/CreatedAt",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 494,
                        "End": 513,
                        "Line": 10,
                        "Column": 40,
                        "Src": {
                          "Name": "graphql/schema/product.graphqls",
                          "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 487,
                      "End": 492,
                      "Line": 10,
                      "Column": 32,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 480,
                  "End": 486,
                  "Line": 10,
                  "Column": 25,
                  "Src": {
                    "Name": "graphql/schema/product.graphqls",
                    "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 457,
              "End": 466,
              "Line": 10,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "brand",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Brand",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 531,
                "End": 532,
                "Line": 12,
                "Column": 16,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Name": "key",
                    "Value": {
                      "Raw": "Brand/ByID",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 546,
                        "End": 558,
                        "Line": 12,
                        "Column": 32,
                        "Src": {
                          "Name": "graphql/schema/product.graphqls",
                          "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 541,
                      "End": 544,
                      "Line": 12,
                      "Column": 26,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  {
                    "Name": "args",
                    "Value": {
                      "Raw": "",
                      "Children": [
                        {
                          "Name": "",
                          "Value": {
                            "Raw": "primaryID=Product/BrandID",
                            "Children": null,
                            "Kind": 3,
                            "Position": {
                              "Start": 567,
                              "End": 594,
                              "Line": 12,
                              "Column": 53,
                              "Src": {
                                "Name": "graphql/schema/product.graphqls",
                                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                                "BuiltIn": false
                              }
                            },
                            "Definition": null,
                            "VariableDefinition": null,
                            "ExpectedType": null
                          },
                          "Position": null
                        }
                      ],
                      "Kind": 8,
                      "Position": {
                        "Start": 566,
                        "End": 567,
                        "Line": 12,
                        "Column": 51,
                        "Src": {
                          "Name": "graphql/schema/product.graphqls",
                          "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 560,
                      "End": 564,
                      "Line": 12,
                      "Column": 45,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 532,
                  "End": 540,
                  "Line": 12,
                  "Column": 17,
                  "Src": {
                    "Name": "graphql/schema/product.graphqls",
                    "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "retrieve",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "key",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 285,
                          "End": 289,
                          "Line": 12,
                          "Column": 35,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 271,
                        "End": 274,
                        "Line": 12,
                        "Column": 21,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    {
                      "Description": "",
                      "Name": "args",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "",
                        "Elem": {
                          "NamedType": "String",
                          "Elem": null,
                          "NonNull": true,
                          "Position": {
                            "Start": 299,
                            "End": 300,
                            "Line": 12,
                            "Column": 49,
                            "Src": {
                              "Name": "graphql/schema/schema.graphqls",
                              "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                              "BuiltIn": false
                            }
                          }
                        },
                        "NonNull": false,
                        "Position": {
                          "Start": 292,
                          "End": 298,
                          "Line": 12,
                          "Column": 42,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 262,
                    "End": 270,
                    "Line": 12,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 517,
              "End": 522,
              "Line": 12,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "categories",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "Category",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 620,
                  "End": 621,
                  "Line": 13,
                  "Column": 24,
                  "Src": {
                    "Name": "graphql/schema/product.graphqls",
                    "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                    "BuiltIn": false
                  }
                }
              },
              "NonNull": true,
              "Position": {
                "Start": 623,
                "End": 624,
                "Line": 13,
                "Column": 27,
                "Src": {
                  "Name": "graphql/schema/product.graphqls",
                  "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Name": "key",
                    "Value": {
                      "Raw": "Category/AllByProductID",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 638,
                        "End": 663,
                        "Line": 13,
                        "Column": 43,
                        "Src": {
                          "Name": "graphql/schema/product.graphqls",
                          "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 633,
                      "End": 636,
                      "Line": 13,
                      "Column": 37,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  {
                    "Name": "args",
                    "Value": {
                      "Raw": "",
                      "Children": [
                        {
                          "Name": "",
                          "Value": {
                            "Raw": "productID=Product/ProductID",
                            "Children": null,
                            "Kind": 3,
                            "Position": {
                              "Start": 672,
                              "End": 701,
                              "Line": 13,
                              "Column": 77,
                              "Src": {
                                "Name": "graphql/schema/product.graphqls",
                                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                                "BuiltIn": false
                              }
                            },
                            "Definition": null,
                            "VariableDefinition": null,
                            "ExpectedType": null
                          },
                          "Position": null
                        }
                      ],
                      "Kind": 8,
                      "Position": {
                        "Start": 671,
                        "End": 672,
                        "Line": 13,
                        "Column": 75,
                        "Src": {
                          "Name": "graphql/schema/product.graphqls",
                          "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 665,
                      "End": 669,
                      "Line": 13,
                      "Column": 69,
                      "Src": {
                        "Name": "graphql/schema/product.graphqls",
                        "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 624,
                  "End": 632,
                  "Line": 13,
                  "Column": 28,
                  "Src": {
                    "Name": "graphql/schema/product.graphqls",
                    "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "retrieve",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "key",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 285,
                          "End": 289,
                          "Line": 12,
                          "Column": 35,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 271,
                        "End": 274,
                        "Line": 12,
                        "Column": 21,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    {
                      "Description": "",
                      "Name": "args",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "",
                        "Elem": {
                          "NamedType": "String",
                          "Elem": null,
                          "NonNull": true,
                          "Position": {
                            "Start": 299,
                            "End": 300,
                            "Line": 12,
                            "Column": 49,
                            "Src": {
                              "Name": "graphql/schema/schema.graphqls",
                              "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                              "BuiltIn": false
                            }
                          }
                        },
                        "NonNull": false,
                        "Position": {
                          "Start": 292,
                          "End": 298,
                          "Line": 12,
                          "Column": 42,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 262,
                    "End": 270,
                    "Line": 12,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 598,
              "End": 608,
              "Line": 13,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/product.graphqls",
                "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
                "BuiltIn": false
              }
            }
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 5,
          "End": 12,
          "Line": 1,
          "Column": 6,
          "Src": {
            "Name": "graphql/schema/product.graphqls",
            "Input": "type Product {\n\tproductID: UUID!
		@object(field: \"Product/ProductID\")\n\tname: String!
		@object(field: \"Product/Name\")\n\tprice: Int!
		@object(field: \"Product/Price\")\n\tpromotionDiscount: Int
		@object(field: \"Product/PromotionDiscount\")\n\tpromotionDiscountMultiple: Int
		@object(field: \"Product/PromotionDiscountMultiple\")\n\tvolume: Int
		@object(field: \"Product/Volume\")\n\tabv: Int
		@object(field: \"Product/ABV\")\n\tupdatedAt: Timestamp
		@object(field: \"Product/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"Product/CreatedAt\")\n\n\tbrand: Brand! @retrieve(key: \"Brand/ByID\", args: [\"primaryID=Product/BrandID\"])\n\tcategories: [Category!]! @retrieve(key: \"Category/AllByProductID\", args: [\"productID=Product/ProductID\"])\n}\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false
      }
    ],
    "Query": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "Query",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "getUsers",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "User",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 30,
                  "End": 31,
                  "Line": 2,
                  "Column": 18,
                  "Src": {
                    "Name": "graphql/schema/query.graphqls",
                    "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                    "BuiltIn": false
                  }
                }
              },
              "NonNull": true,
              "Position": {
                "Start": 33,
                "End": 34,
                "Line": 2,
                "Column": 21,
                "Src": {
                  "Name": "graphql/schema/query.graphqls",
                  "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Name": "key",
                    "Value": {
                      "Raw": "User/Top1000",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 48,
                        "End": 62,
                        "Line": 2,
                        "Column": 37,
                        "Src": {
                          "Name": "graphql/schema/query.graphqls",
                          "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 43,
                      "End": 46,
                      "Line": 2,
                      "Column": 31,
                      "Src": {
                        "Name": "graphql/schema/query.graphqls",
                        "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 34,
                  "End": 42,
                  "Line": 2,
                  "Column": 22,
                  "Src": {
                    "Name": "graphql/schema/query.graphqls",
                    "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "retrieve",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "key",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 285,
                          "End": 289,
                          "Line": 12,
                          "Column": 35,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 271,
                        "End": 274,
                        "Line": 12,
                        "Column": 21,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    {
                      "Description": "",
                      "Name": "args",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "",
                        "Elem": {
                          "NamedType": "String",
                          "Elem": null,
                          "NonNull": true,
                          "Position": {
                            "Start": 299,
                            "End": 300,
                            "Line": 12,
                            "Column": 49,
                            "Src": {
                              "Name": "graphql/schema/schema.graphqls",
                              "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                              "BuiltIn": false
                            }
                          }
                        },
                        "NonNull": false,
                        "Position": {
                          "Start": 292,
                          "End": 298,
                          "Line": 12,
                          "Column": 42,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 262,
                    "End": 270,
                    "Line": 12,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 14,
              "End": 22,
              "Line": 2,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/query.graphqls",
                "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "getProducts",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "Product",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 87,
                  "End": 88,
                  "Line": 3,
                  "Column": 24,
                  "Src": {
                    "Name": "graphql/schema/query.graphqls",
                    "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                    "BuiltIn": false
                  }
                }
              },
              "NonNull": true,
              "Position": {
                "Start": 90,
                "End": 91,
                "Line": 3,
                "Column": 27,
                "Src": {
                  "Name": "graphql/schema/query.graphqls",
                  "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Name": "key",
                    "Value": {
                      "Raw": "Product/Top1000",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 105,
                        "End": 122,
                        "Line": 3,
                        "Column": 43,
                        "Src": {
                          "Name": "graphql/schema/query.graphqls",
                          "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 100,
                      "End": 103,
                      "Line": 3,
                      "Column": 37,
                      "Src": {
                        "Name": "graphql/schema/query.graphqls",
                        "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 91,
                  "End": 99,
                  "Line": 3,
                  "Column": 28,
                  "Src": {
                    "Name": "graphql/schema/query.graphqls",
                    "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "retrieve",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "key",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 285,
                          "End": 289,
                          "Line": 12,
                          "Column": 35,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 271,
                        "End": 274,
                        "Line": 12,
                        "Column": 21,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    {
                      "Description": "",
                      "Name": "args",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "",
                        "Elem": {
                          "NamedType": "String",
                          "Elem": null,
                          "NonNull": true,
                          "Position": {
                            "Start": 299,
                            "End": 300,
                            "Line": 12,
                            "Column": 49,
                            "Src": {
                              "Name": "graphql/schema/schema.graphqls",
                              "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                              "BuiltIn": false
                            }
                          }
                        },
                        "NonNull": false,
                        "Position": {
                          "Start": 292,
                          "End": 298,
                          "Line": 12,
                          "Column": 42,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 262,
                    "End": 270,
                    "Line": 12,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 65,
              "End": 76,
              "Line": 3,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/query.graphqls",
                "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "getProductByID",
            "Arguments": [
              {
                "Description": "",
                "Name": "productID",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "UUID",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 157,
                    "End": 158,
                    "Line": 5,
                    "Column": 33,
                    "Src": {
                      "Name": "graphql/schema/query.graphqls",
                      "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 141,
                  "End": 150,
                  "Line": 5,
                  "Column": 17,
                  "Src": {
                    "Name": "graphql/schema/query.graphqls",
                    "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                    "BuiltIn": false
                  }
                }
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Product",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 160,
                "End": 167,
                "Line": 5,
                "Column": 36,
                "Src": {
                  "Name": "graphql/schema/query.graphqls",
                  "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Name": "key",
                    "Value": {
                      "Raw": "Product/ByID",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 183,
                        "End": 197,
                        "Line": 5,
                        "Column": 60,
                        "Src": {
                          "Name": "graphql/schema/query.graphqls",
                          "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 178,
                      "End": 181,
                      "Line": 5,
                      "Column": 54,
                      "Src": {
                        "Name": "graphql/schema/query.graphqls",
                        "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  {
                    "Name": "args",
                    "Value": {
                      "Raw": "",
                      "Children": [
                        {
                          "Name": "",
                          "Value": {
                            "Raw": "primaryID=$productID",
                            "Children": null,
                            "Kind": 3,
                            "Position": {
                              "Start": 206,
                              "End": 228,
                              "Line": 5,
                              "Column": 83,
                              "Src": {
                                "Name": "graphql/schema/query.graphqls",
                                "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                                "BuiltIn": false
                              }
                            },
                            "Definition": null,
                            "VariableDefinition": null,
                            "ExpectedType": null
                          },
                          "Position": null
                        }
                      ],
                      "Kind": 8,
                      "Position": {
                        "Start": 205,
                        "End": 206,
                        "Line": 5,
                        "Column": 81,
                        "Src": {
                          "Name": "graphql/schema/query.graphqls",
                          "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 199,
                      "End": 203,
                      "Line": 5,
                      "Column": 75,
                      "Src": {
                        "Name": "graphql/schema/query.graphqls",
                        "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 169,
                  "End": 177,
                  "Line": 5,
                  "Column": 45,
                  "Src": {
                    "Name": "graphql/schema/query.graphqls",
                    "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "retrieve",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "key",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 285,
                          "End": 289,
                          "Line": 12,
                          "Column": 35,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 271,
                        "End": 274,
                        "Line": 12,
                        "Column": 21,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    {
                      "Description": "",
                      "Name": "args",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "",
                        "Elem": {
                          "NamedType": "String",
                          "Elem": null,
                          "NonNull": true,
                          "Position": {
                            "Start": 299,
                            "End": 300,
                            "Line": 12,
                            "Column": 49,
                            "Src": {
                              "Name": "graphql/schema/schema.graphqls",
                              "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                              "BuiltIn": false
                            }
                          }
                        },
                        "NonNull": false,
                        "Position": {
                          "Start": 292,
                          "End": 298,
                          "Line": 12,
                          "Column": 42,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 262,
                    "End": 270,
                    "Line": 12,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 126,
              "End": 140,
              "Line": 5,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/query.graphqls",
                "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "__schema",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Schema",
              "Elem": null,
              "NonNull": true,
              "Position": null
            },
            "Directives": null,
            "Position": null
          },
          {
            "Description": "",
            "Name": "__type",
            "Arguments": [
              {
                "Description": "",
                "Name": "name",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "String",
                  "Elem": null,
                  "NonNull": false,
                  "Position": null
                },
                "Directives": null,
                "Position": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": true,
              "Position": null
            },
            "Directives": null,
            "Position": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 5,
          "End": 10,
          "Line": 1,
          "Column": 6,
          "Src": {
            "Name": "graphql/schema/query.graphqls",
            "Input": "type Query {\n\tgetUsers: [User!]! @retrieve(key: \"User/Top1000\")\n\tgetProducts: [Product!]! @retrieve(key: \"Product/Top1000\")\n\n\tgetProductByID(productID: UUID!): Product @retrieve(key: \"Product/ByID\", args: [\"primaryID=$productID\"])\n}\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false
      }
    ],
    "UpdateProductInput": [
      {
        "Kind": "INPUT_OBJECT",
        "Description": "",
        "Name": "UpdateProductInput",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "productID",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "UUID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 46,
                "End": 50,
                "Line": 3,
                "Column": 2,
                "Src": {
                  "Name": "graphql/schema/inputs.graphqls",
                  "Input": "input UpdateProductInput {\n\tproductID: UUID!\n\tname: String!\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 28,
              "End": 37,
              "Line": 2,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/inputs.graphqls",
                "Input": "input UpdateProductInput {\n\tproductID: UUID!\n\tname: String!\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 60,
                "End": 61,
                "Line": 4,
                "Column": 1,
                "Src": {
                  "Name": "graphql/schema/inputs.graphqls",
                  "Input": "input UpdateProductInput {\n\tproductID: UUID!\n\tname: String!\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 46,
              "End": 50,
              "Line": 3,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/inputs.graphqls",
                "Input": "input UpdateProductInput {\n\tproductID: UUID!\n\tname: String!\n}\n",
                "BuiltIn": false
              }
            }
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 6,
          "End": 24,
          "Line": 1,
          "Column": 7,
          "Src": {
            "Name": "graphql/schema/inputs.graphqls",
            "Input": "input UpdateProductInput {\n\tproductID: UUID!\n\tname: String!\n}\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false
      }
    ],
    "User": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "User",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "userID",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "UUID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 27,
                "End": 28,
                "Line": 2,
                "Column": 16,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "User/UserID",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 42,
                        "End": 55,
                        "Line": 2,
                        "Column": 32,
                        "Src": {
                          "Name": "graphql/schema/user.graphqls",
                          "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 35,
                      "End": 40,
                      "Line": 2,
                      "Column": 24,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 28,
                  "End": 34,
                  "Line": 2,
                  "Column": 17,
                  "Src": {
                    "Name": "graphql/schema/user.graphqls",
                    "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 13,
              "End": 19,
              "Line": 2,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "userName",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 76,
                "End": 77,
                "Line": 3,
                "Column": 20,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "User/UserName",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 91,
                        "End": 106,
                        "Line": 3,
                        "Column": 36,
                        "Src": {
                          "Name": "graphql/schema/user.graphqls",
                          "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 84,
                      "End": 89,
                      "Line": 3,
                      "Column": 28,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 77,
                  "End": 83,
                  "Line": 3,
                  "Column": 21,
                  "Src": {
                    "Name": "graphql/schema/user.graphqls",
                    "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 58,
              "End": 66,
              "Line": 3,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "firstName",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 128,
                "End": 129,
                "Line": 4,
                "Column": 21,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "User/FirstName",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 143,
                        "End": 159,
                        "Line": 4,
                        "Column": 37,
                        "Src": {
                          "Name": "graphql/schema/user.graphqls",
                          "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 136,
                      "End": 141,
                      "Line": 4,
                      "Column": 29,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 129,
                  "End": 135,
                  "Line": 4,
                  "Column": 22,
                  "Src": {
                    "Name": "graphql/schema/user.graphqls",
                    "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 109,
              "End": 118,
              "Line": 4,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "lastName",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 180,
                "End": 181,
                "Line": 5,
                "Column": 20,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "User/LastName",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 195,
                        "End": 210,
                        "Line": 5,
                        "Column": 36,
                        "Src": {
                          "Name": "graphql/schema/user.graphqls",
                          "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 188,
                      "End": 193,
                      "Line": 5,
                      "Column": 28,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 181,
                  "End": 187,
                  "Line": 5,
                  "Column": 21,
                  "Src": {
                    "Name": "graphql/schema/user.graphqls",
                    "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 162,
              "End": 170,
              "Line": 5,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "dob",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Timestamp",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 229,
                "End": 230,
                "Line": 6,
                "Column": 18,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "User/DOB",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 244,
                        "End": 254,
                        "Line": 6,
                        "Column": 34,
                        "Src": {
                          "Name": "graphql/schema/user.graphqls",
                          "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 237,
                      "End": 242,
                      "Line": 6,
                      "Column": 26,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 230,
                  "End": 236,
                  "Line": 6,
                  "Column": 19,
                  "Src": {
                    "Name": "graphql/schema/user.graphqls",
                    "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 213,
              "End": 216,
              "Line": 6,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "updatedAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Timestamp",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 268,
                "End": 277,
                "Line": 7,
                "Column": 13,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "User/UpdatedAt",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 293,
                        "End": 309,
                        "Line": 7,
                        "Column": 39,
                        "Src": {
                          "Name": "graphql/schema/user.graphqls",
                          "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 286,
                      "End": 291,
                      "Line": 7,
                      "Column": 31,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 279,
                  "End": 285,
                  "Line": 7,
                  "Column": 24,
                  "Src": {
                    "Name": "graphql/schema/user.graphqls",
                    "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 257,
              "End": 266,
              "Line": 7,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "createdAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Timestamp",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 334,
                "End": 335,
                "Line": 8,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "object",
                "Arguments": [
                  {
                    "Name": "field",
                    "Value": {
                      "Raw": "User/CreatedAt",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 349,
                        "End": 365,
                        "Line": 8,
                        "Column": 40,
                        "Src": {
                          "Name": "graphql/schema/user.graphqls",
                          "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 342,
                      "End": 347,
                      "Line": 8,
                      "Column": 32,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 335,
                  "End": 341,
                  "Line": 8,
                  "Column": 25,
                  "Src": {
                    "Name": "graphql/schema/user.graphqls",
                    "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "object",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "field",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 229,
                          "End": 230,
                          "Line": 11,
                          "Column": 33,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 215,
                        "End": 220,
                        "Line": 11,
                        "Column": 19,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 208,
                    "End": 214,
                    "Line": 11,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 312,
              "End": 321,
              "Line": 8,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Description": "",
            "Name": "contacts",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "Contact",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 388,
                  "End": 389,
                  "Line": 10,
                  "Column": 21,
                  "Src": {
                    "Name": "graphql/schema/user.graphqls",
                    "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                    "BuiltIn": false
                  }
                }
              },
              "NonNull": true,
              "Position": {
                "Start": 391,
                "End": 392,
                "Line": 10,
                "Column": 24,
                "Src": {
                  "Name": "graphql/schema/user.graphqls",
                  "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "retrieve",
                "Arguments": [
                  {
                    "Name": "key",
                    "Value": {
                      "Raw": "Contact/AllByUserID",
                      "Children": null,
                      "Kind": 3,
                      "Position": {
                        "Start": 406,
                        "End": 427,
                        "Line": 10,
                        "Column": 40,
                        "Src": {
                          "Name": "graphql/schema/user.graphqls",
                          "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 401,
                      "End": 404,
                      "Line": 10,
                      "Column": 34,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  },
                  {
                    "Name": "args",
                    "Value": {
                      "Raw": "",
                      "Children": [
                        {
                          "Name": "",
                          "Value": {
                            "Raw": "userID=User/UserID",
                            "Children": null,
                            "Kind": 3,
                            "Position": {
                              "Start": 436,
                              "End": 456,
                              "Line": 10,
                              "Column": 70,
                              "Src": {
                                "Name": "graphql/schema/user.graphqls",
                                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                                "BuiltIn": false
                              }
                            },
                            "Definition": null,
                            "VariableDefinition": null,
                            "ExpectedType": null
                          },
                          "Position": null
                        }
                      ],
                      "Kind": 8,
                      "Position": {
                        "Start": 435,
                        "End": 436,
                        "Line": 10,
                        "Column": 68,
                        "Src": {
                          "Name": "graphql/schema/user.graphqls",
                          "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                          "BuiltIn": false
                        }
                      },
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 429,
                      "End": 433,
                      "Line": 10,
                      "Column": 62,
                      "Src": {
                        "Name": "graphql/schema/user.graphqls",
                        "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                        "BuiltIn": false
                      }
                    }
                  }
                ],
                "Position": {
                  "Start": 392,
                  "End": 400,
                  "Line": 10,
                  "Column": 25,
                  "Src": {
                    "Name": "graphql/schema/user.graphqls",
                    "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "retrieve",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "key",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "String",
                        "Elem": null,
                        "NonNull": true,
                        "Position": {
                          "Start": 285,
                          "End": 289,
                          "Line": 12,
                          "Column": 35,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 271,
                        "End": 274,
                        "Line": 12,
                        "Column": 21,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    {
                      "Description": "",
                      "Name": "args",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "",
                        "Elem": {
                          "NamedType": "String",
                          "Elem": null,
                          "NonNull": true,
                          "Position": {
                            "Start": 299,
                            "End": 300,
                            "Line": 12,
                            "Column": 49,
                            "Src": {
                              "Name": "graphql/schema/schema.graphqls",
                              "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                              "BuiltIn": false
                            }
                          }
                        },
                        "NonNull": false,
                        "Position": {
                          "Start": 292,
                          "End": 298,
                          "Line": 12,
                          "Column": 42,
                          "Src": {
                            "Name": "graphql/schema/schema.graphqls",
                            "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 285,
                        "End": 289,
                        "Line": 12,
                        "Column": 35,
                        "Src": {
                          "Name": "graphql/schema/schema.graphqls",
                          "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "Position": {
                    "Start": 262,
                    "End": 270,
                    "Line": 12,
                    "Column": 12,
                    "Src": {
                      "Name": "graphql/schema/schema.graphqls",
                      "Input": "schema {\n\tquery: Query\n\tmutation: Mutation\n}\n\nscalar UUID\nscalar Timestamp\n\ndirective @primary on FIELD_DEFINITION | ARGUMENT_DEFINITION\ndirective
@cache(ttl: String!) on FIELD_DEFINITION | OBJECT\ndirective
		@object(field: String!) on FIELD_DEFINITION\ndirective @retrieve(key: String!, args: [String!]) on FIELD_DEFINITION\ndirective @arg(key: String!) on ARGUMENT_DEFINITION | FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 369,
              "End": 377,
              "Line": 10,
              "Column": 2,
              "Src": {
                "Name": "graphql/schema/user.graphqls",
                "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
                "BuiltIn": false
              }
            }
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 5,
          "End": 9,
          "Line": 1,
          "Column": 6,
          "Src": {
            "Name": "graphql/schema/user.graphqls",
            "Input": "type User {\n\tuserID: UUID!
		@object(field: \"User/UserID\")\n\tuserName: String!
		@object(field: \"User/UserName\")\n\tfirstName: String!
		@object(field: \"User/FirstName\")\n\tlastName: String!
		@object(field: \"User/LastName\")\n\tdob: Timestamp!
		@object(field: \"User/DOB\")\n\tupdatedAt: Timestamp
		@object(field: \"User/UpdatedAt\")\n\tcreatedAt: Timestamp!
		@object(field: \"User/CreatedAt\")\n\n\tcontacts: [Contact!]! @retrieve(key: \"Contact/AllByUserID\", args: [\"userID=User/UserID\"])\n}\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false
      }
    ],
    "__Directive": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "__Directive",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3057,
                "End": 3068,
                "Line": 95,
                "Column": 5,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3039,
              "End": 3043,
              "Line": 94,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "description",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 3070,
                "End": 3076,
                "Line": 95,
                "Column": 18,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3057,
              "End": 3068,
              "Line": 95,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "locations",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__DirectiveLocation",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 3113,
                  "End": 3114,
                  "Line": 96,
                  "Column": 37,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": true,
              "Position": {
                "Start": 3120,
                "End": 3124,
                "Line": 97,
                "Column": 5,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3081,
              "End": 3090,
              "Line": 96,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "args",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__InputValue",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 3140,
                  "End": 3141,
                  "Line": 97,
                  "Column": 25,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": true,
              "Position": {
                "Start": 3143,
                "End": 3144,
                "Line": 98,
                "Column": 1,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3120,
              "End": 3124,
              "Line": 97,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 3021,
          "End": 3032,
          "Line": 93,
          "Column": 6,
          "Src": {
            "Name": "prelude.graphql",
            "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
            "BuiltIn": true
          }
        },
        "BuiltIn": true
      }
    ],
    "__EnumValue": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "__EnumValue",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2821,
                "End": 2832,
                "Line": 77,
                "Column": 5,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2803,
              "End": 2807,
              "Line": 76,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "description",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 2834,
                "End": 2840,
                "Line": 77,
                "Column": 18,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2821,
              "End": 2832,
              "Line": 77,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "isDeprecated",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Boolean",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2872,
                "End": 2889,
                "Line": 79,
                "Column": 5,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2845,
              "End": 2857,
              "Line": 78,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "deprecationReason",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 2891,
                "End": 2897,
                "Line": 79,
                "Column": 24,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2872,
              "End": 2889,
              "Line": 79,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 2785,
          "End": 2796,
          "Line": 75,
          "Column": 6,
          "Src": {
            "Name": "prelude.graphql",
            "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
            "BuiltIn": true
          }
        },
        "BuiltIn": true
      }
    ],
    "__Field": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "__Field",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2547,
                "End": 2558,
                "Line": 61,
                "Column": 5,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2529,
              "End": 2533,
              "Line": 60,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "description",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 2560,
                "End": 2566,
                "Line": 61,
                "Column": 18,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2547,
              "End": 2558,
              "Line": 61,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "args",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__InputValue",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 2591,
                  "End": 2592,
                  "Line": 62,
                  "Column": 25,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": true,
              "Position": {
                "Start": 2598,
                "End": 2602,
                "Line": 63,
                "Column": 5,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2571,
              "End": 2575,
              "Line": 62,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "type",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2616,
                "End": 2628,
                "Line": 64,
                "Column": 5,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2598,
              "End": 2602,
              "Line": 63,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "isDeprecated",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Boolean",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2643,
                "End": 2660,
                "Line": 65,
                "Column": 5,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2616,
              "End": 2628,
              "Line": 64,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "deprecationReason",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 2662,
                "End": 2668,
                "Line": 65,
                "Column": 24,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2643,
              "End": 2660,
              "Line": 65,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 2515,
          "End": 2522,
          "Line": 59,
          "Column": 6,
          "Src": {
            "Name": "prelude.graphql",
            "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
            "BuiltIn": true
          }
        },
        "BuiltIn": true
      }
    ],
    "__InputValue": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "__InputValue",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2714,
                "End": 2725,
                "Line": 70,
                "Column": 5,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2696,
              "End": 2700,
              "Line": 69,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "description",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 2727,
                "End": 2733,
                "Line": 70,
                "Column": 18,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2714,
              "End": 2725,
              "Line": 70,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "type",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2756,
                "End": 2768,
                "Line": 72,
                "Column": 5,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2738,
              "End": 2742,
              "Line": 71,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "defaultValue",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 2770,
                "End": 2776,
                "Line": 72,
                "Column": 19,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2756,
              "End": 2768,
              "Line": 72,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 2677,
          "End": 2689,
          "Line": 68,
          "Column": 6,
          "Src": {
            "Name": "prelude.graphql",
            "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
            "BuiltIn": true
          }
        },
        "BuiltIn": true
      }
    ],
    "__Schema": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "__Schema",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "types",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__Type",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 1926,
                  "End": 1927,
                  "Line": 28,
                  "Column": 20,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": true,
              "Position": {
                "Start": 1933,
                "End": 1942,
                "Line": 29,
                "Column": 5,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 1911,
              "End": 1916,
              "Line": 28,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "queryType",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 1956,
                "End": 1968,
                "Line": 30,
                "Column": 5,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 1933,
              "End": 1942,
              "Line": 29,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "mutationType",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 1970,
                "End": 1976,
                "Line": 30,
                "Column": 19,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 1956,
              "End": 1968,
              "Line": 30,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "subscriptionType",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 1999,
                "End": 2005,
                "Line": 31,
                "Column": 23,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 1981,
              "End": 1997,
              "Line": 31,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "directives",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__Directive",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 2035,
                  "End": 2036,
                  "Line": 32,
                  "Column": 30,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": true,
              "Position": {
                "Start": 2038,
                "End": 2039,
                "Line": 33,
                "Column": 1,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2010,
              "End": 2020,
              "Line": 32,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 1896,
          "End": 1904,
          "Line": 27,
          "Column": 6,
          "Src": {
            "Name": "prelude.graphql",
            "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
            "BuiltIn": true
          }
        },
        "BuiltIn": true
      }
    ],
    "__Type": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "__Type",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "kind",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__TypeKind",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2081,
                "End": 2085,
                "Line": 37,
                "Column": 5,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2059,
              "End": 2063,
              "Line": 36,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 2087,
                "End": 2093,
                "Line": 37,
                "Column": 11,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2081,
              "End": 2085,
              "Line": 37,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "description",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 2111,
                "End": 2117,
                "Line": 38,
                "Column": 18,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2098,
              "End": 2109,
              "Line": 38,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "fields",
            "Arguments": [
              {
                "Description": "",
                "Name": "includeDeprecated",
                "DefaultValue": {
                  "Raw": "false",
                  "Children": null,
                  "Kind": 5,
                  "Position": {
                    "Start": 2191,
                    "End": 2196,
                    "Line": 41,
                    "Column": 41,
                    "Src": {
                      "Name": "prelude.graphql",
                      "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                      "BuiltIn": true
                    }
                  },
                  "Definition": null,
                  "VariableDefinition": null,
                  "ExpectedType": null
                },
                "Type": {
                  "NamedType": "Boolean",
                  "Elem": null,
                  "NonNull": false,
                  "Position": {
                    "Start": 2181,
                    "End": 2188,
                    "Line": 41,
                    "Column": 31,
                    "Src": {
                      "Name": "prelude.graphql",
                      "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                      "BuiltIn": true
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 2162,
                  "End": 2179,
                  "Line": 41,
                  "Column": 12,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__Field",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 2208,
                  "End": 2209,
                  "Line": 41,
                  "Column": 58,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 2200,
                "End": 2207,
                "Line": 41,
                "Column": 50,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2155,
              "End": 2161,
              "Line": 41,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "interfaces",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__Type",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 2253,
                  "End": 2254,
                  "Line": 44,
                  "Column": 25,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 2246,
                "End": 2252,
                "Line": 44,
                "Column": 18,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2233,
              "End": 2243,
              "Line": 44,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "possibleTypes",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__Type",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 2314,
                  "End": 2315,
                  "Line": 47,
                  "Column": 28,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 2307,
                "End": 2313,
                "Line": 47,
                "Column": 21,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2291,
              "End": 2304,
              "Line": 47,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "enumValues",
            "Arguments": [
              {
                "Description": "",
                "Name": "includeDeprecated",
                "DefaultValue": {
                  "Raw": "false",
                  "Children": null,
                  "Kind": 5,
                  "Position": {
                    "Start": 2377,
                    "End": 2382,
                    "Line": 50,
                    "Column": 45,
                    "Src": {
                      "Name": "prelude.graphql",
                      "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                      "BuiltIn": true
                    }
                  },
                  "Definition": null,
                  "VariableDefinition": null,
                  "ExpectedType": null
                },
                "Type": {
                  "NamedType": "Boolean",
                  "Elem": null,
                  "NonNull": false,
                  "Position": {
                    "Start": 2367,
                    "End": 2374,
                    "Line": 50,
                    "Column": 35,
                    "Src": {
                      "Name": "prelude.graphql",
                      "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                      "BuiltIn": true
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 2348,
                  "End": 2365,
                  "Line": 50,
                  "Column": 16,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__EnumValue",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 2398,
                  "End": 2399,
                  "Line": 50,
                  "Column": 66,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 2386,
                "End": 2397,
                "Line": 50,
                "Column": 54,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2337,
              "End": 2347,
              "Line": 50,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "inputFields",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__InputValue",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 2456,
                  "End": 2457,
                  "Line": 53,
                  "Column": 32,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 2443,
                "End": 2455,
                "Line": 53,
                "Column": 19,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2429,
              "End": 2440,
              "Line": 53,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          {
            "Description": "",
            "Name": "ofType",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 2500,
                "End": 2506,
                "Line": 56,
                "Column": 13,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2492,
              "End": 2498,
              "Line": 56,
              "Column": 5,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 2046,
          "End": 2052,
          "Line": 35,
          "Column": 6,
          "Src": {
            "Name": "prelude.graphql",
            "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ENUM_VALUE\n\ntype __Schema {\n    types: [__Type!]!\n    queryType: __Type!\n    mutationType: __Type\n    subscriptionType: __Type\n    directives: [__Directive!]!\n}\n\ntype __Type {\n    kind: __TypeKind!\n    name: String\n    description: String\n\n    # OBJECT and INTERFACE only\n    fields(includeDeprecated: Boolean = false): [__Field!]\n\n    # OBJECT only\n    interfaces: [__Type!]\n\n    # INTERFACE and UNION only\n    possibleTypes: [__Type!]\n\n    # ENUM only\n    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n    # INPUT_OBJECT only\n    inputFields: [__InputValue!]\n\n    # NON_NULL and LIST only\n    ofType: __Type\n}\n\ntype __Field {\n    name: String!\n    description: String\n    args: [__InputValue!]!\n    type: __Type!\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\ntype __InputValue {\n    name: String!\n    description: String\n    type: __Type!\n    defaultValue: String\n}\n\ntype __EnumValue {\n    name: String!\n    description: String\n    isDeprecated: Boolean!\n    deprecationReason: String\n}\n\nenum __TypeKind {\n    SCALAR\n    OBJECT\n    INTERFACE\n    UNION\n    ENUM\n    INPUT_OBJECT\n    LIST\n    NON_NULL\n}\n\ntype __Directive {\n    name: String!\n    description: String\n    locations: [__DirectiveLocation!]!\n    args: [__InputValue!]!\n}\n\nenum __DirectiveLocation {\n    QUERY\n    MUTATION\n    SUBSCRIPTION\n    FIELD\n    FRAGMENT_DEFINITION\n    FRAGMENT_SPREAD\n    INLINE_FRAGMENT\n    SCHEMA\n    SCALAR\n    OBJECT\n    FIELD_DEFINITION\n    ARGUMENT_DEFINITION\n    INTERFACE\n    UNION\n    ENUM\n    ENUM_VALUE\n    INPUT_OBJECT\n    INPUT_FIELD_DEFINITION\n}\n",
            "BuiltIn": true
          }
        },
        "BuiltIn": true
      }
    ]
  },
  "Implements": {}
}